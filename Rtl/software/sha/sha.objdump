
sha.elf:     file format elf32-littlenios2
sha.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x000025b8 memsz 0x000025b8 flags r-x
    LOAD off    0x000035d8 vaddr 0x0000a5d8 paddr 0x0000a8ac align 2**12
         filesz 0x000002d4 memsz 0x000002d4 flags rw-
    LOAD off    0x00003b80 vaddr 0x0000ab80 paddr 0x0000ab80 align 2**12
         filesz 0x00000000 memsz 0x0000009c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000023bc  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  0000a3dc  0000a3dc  000033dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000002d4  0000a5d8  0000a8ac  000035d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          0000009c  0000ab80  0000ab80  00003b80  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  000038ac  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000004e8  00000000  00000000  000038d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000006fc  00000000  00000000  00003dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00009ccc  00000000  00000000  000044bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002429  00000000  00000000  0000e188  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000623f  00000000  00000000  000105b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000008c0  00000000  00000000  000167f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000e16  00000000  00000000  000170b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000018d0  00000000  00000000  00017ec6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  00019798  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000178  00000000  00000000  000197a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0001b12d  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  0001b130  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0001b13c  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0001b13d  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000b  00000000  00000000  0001b13e  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000b  00000000  00000000  0001b149  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000b  00000000  00000000  0001b154  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000006  00000000  00000000  0001b15f  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000026  00000000  00000000  0001b165  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     00029e4d  00000000  00000000  0001b18b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .text	00000000 .text
0000a3dc l    d  .rodata	00000000 .rodata
0000a5d8 l    d  .rwdata	00000000 .rwdata
0000ab80 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 source.c
0000a414 l     O .rodata	00000140 inputs.2268
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00008440 l     F .text	00000080 print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000a5d8 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00008d98 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00008f9c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00009198 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000a6b8 l     O .rwdata	0000002c jtag_uart_0
0000925c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
000095ec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00009668 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00009748 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000988c l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
000099dc l     F .text	000000f8 alt_file_locked
00009c60 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000a1b8 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0000a378 l     F .text	00000040 alt_sim_halt
00008358 g     F .text	0000001c putchar
00009008 g     F .text	0000006c alt_main
0000837c g     F .text	00000090 _puts_r
0000a8ac g       *ABS*	00000000 __flash_rwdata_start
000082c0 g     F .text	00000054 printf
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000ab80 g     O .bss	00000004 errno
0000ab88 g     O .bss	00000004 alt_argv
0001288c g       *ABS*	00000000 _gp
0000a70c g     O .rwdata	00000180 alt_fd_list
00008374 g     F .text	00000008 _putchar_r
00009d58 g     F .text	00000094 alt_find_dev
00009964 g     F .text	00000078 alt_io_redirect
0000a3dc g       *ABS*	00000000 __DTOR_END__
0000840c g     F .text	00000014 puts
00009344 g     F .text	00000104 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00008314 g     F .text	00000044 _printf_r
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00008ed4 g     F .text	00000008 __udivsi3
0000a8a4 g     O .rwdata	00000004 alt_max_fd
0000a890 g     O .rwdata	00000004 _global_impure_ptr
0000ac1c g       *ABS*	00000000 __bss_end
0000a6e4 g     O .rwdata	00000028 alt_dev_null
0000964c g     F .text	0000001c alt_dcache_flush_all
0000a8ac g       *ABS*	00000000 __ram_rwdata_end
0000a89c g     O .rwdata	00000008 alt_dev_list
00009074 g     F .text	00000124 write
00008cac g     F .text	00000074 _putc_r
0000a5d8 g       *ABS*	00000000 __ram_rodata_end
00008edc g     F .text	00000008 __umodsi3
0000ac1c g       *ABS*	00000000 end
0000a3d8 g       *ABS*	00000000 __CTOR_LIST__
00010000 g       *ABS*	00000000 __alt_stack_pointer
00009448 g     F .text	000000a4 altera_avalon_jtag_uart_write
000084c0 g     F .text	0000069c ___vfprintf_internal_r
000080f4 g     F .text	000000f4 read_and_print_hash
0000a1bc g     F .text	000001bc __call_exitprocs
00008020 g     F .text	0000003c _start
0000805c g     F .text	00000098 send_input_to_sha
0000922c g     F .text	00000030 alt_sys_init
0000a04c g     F .text	0000016c __register_exitproc
00008ee4 g     F .text	00000038 __mulsi3
0000a5d8 g       *ABS*	00000000 __ram_rwdata_start
0000a3dc g       *ABS*	00000000 __ram_rodata_start
00009294 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00009f0c g     F .text	000000d0 alt_get_fd
0000a010 g     F .text	0000003c memcmp
0000ac1c g       *ABS*	00000000 __alt_stack_base
00009dec g     F .text	00000120 alt_find_file
00009694 g     F .text	000000b4 alt_dev_llist_insert
00008b80 g     F .text	000000bc __sfvwrite_small_dev
0000ab80 g       *ABS*	00000000 __bss_start
000081e8 g     F .text	000000d8 main
0000ab8c g     O .bss	00000004 alt_envp
000092ec g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0000ab90 g     O .bss	0000008c _atexit0
0000a8a8 g     O .rwdata	00000004 alt_errno
00008c3c g     F .text	00000070 putc
00008e14 g     F .text	00000060 __divsi3
0000a3dc g       *ABS*	00000000 __CTOR_END__
0000a3dc g       *ABS*	00000000 __flash_rodata_start
0000a3dc g       *ABS*	00000000 __DTOR_LIST__
000091f8 g     F .text	00000034 alt_irq_init
00009cc0 g     F .text	00000078 alt_release_fd
00009fdc g     F .text	00000014 atexit
00008d20 g     F .text	00000078 _write_r
0000a88c g     O .rwdata	00000004 _impure_ptr
0000ab84 g     O .bss	00000004 alt_argc
0000980c g     F .text	00000064 _do_dtors
0000a894 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000a8ac g       *ABS*	00000000 _edata
0000ac1c g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
00009d38 g     F .text	00000020 altera_nios2_qsys_irq_init
00009ff0 g     F .text	00000020 exit
00008e74 g     F .text	00000060 __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
0000a3b8 g     F .text	00000020 _exit
00008420 g     F .text	00000020 strlen
00009ad4 g     F .text	0000018c open
00009870 g     F .text	0000001c alt_icache_flush_all
00008b5c g     F .text	00000024 __vfprintf_internal
000097a8 g     F .text	00000064 _do_ctors
000094ec g     F .text	00000100 close
00008f1c g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00008020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d68a2314 	ori	gp,gp,10380
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10aae014 	ori	r2,r2,43904

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18eb0714 	ori	r3,r3,44060

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	0008f1c0 	call	8f1c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	00090080 	call	9008 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <alt_after_alt_main>

0000805c <send_input_to_sha>:
#include "system.h"
#include "io.h"

#define SHA_BASE WRAP_0_BASE

void send_input_to_sha(const uint32_t input[16]) {
    805c:	defffd04 	addi	sp,sp,-12
    8060:	df000215 	stw	fp,8(sp)
    8064:	df000204 	addi	fp,sp,8
    8068:	e13fff15 	stw	r4,-4(fp)
	int i;
    for (i = 0; i < 16; i++) {
    806c:	e03ffe15 	stw	zero,-8(fp)
    8070:	00001106 	br	80b8 <send_input_to_sha+0x5c>
        IOWR(SHA_BASE, i, input[i]);
    8074:	e0bffe17 	ldw	r2,-8(fp)
    8078:	1085883a 	add	r2,r2,r2
    807c:	1085883a 	add	r2,r2,r2
    8080:	1009883a 	mov	r4,r2
    8084:	e0bffe17 	ldw	r2,-8(fp)
    8088:	1085883a 	add	r2,r2,r2
    808c:	1085883a 	add	r2,r2,r2
    8090:	1007883a 	mov	r3,r2
    8094:	e0bfff17 	ldw	r2,-4(fp)
    8098:	1885883a 	add	r2,r3,r2
    809c:	10800017 	ldw	r2,0(r2)
    80a0:	1007883a 	mov	r3,r2
    80a4:	2005883a 	mov	r2,r4
    80a8:	10c00035 	stwio	r3,0(r2)

#define SHA_BASE WRAP_0_BASE

void send_input_to_sha(const uint32_t input[16]) {
	int i;
    for (i = 0; i < 16; i++) {
    80ac:	e0bffe17 	ldw	r2,-8(fp)
    80b0:	10800044 	addi	r2,r2,1
    80b4:	e0bffe15 	stw	r2,-8(fp)
    80b8:	e0bffe17 	ldw	r2,-8(fp)
    80bc:	10800410 	cmplti	r2,r2,16
    80c0:	103fec1e 	bne	r2,zero,8074 <send_input_to_sha+0x18>
        IOWR(SHA_BASE, i, input[i]);
    }
    IOWR(SHA_BASE, 24, 1);
    80c4:	00c01804 	movi	r3,96
    80c8:	00800044 	movi	r2,1
    80cc:	18800035 	stwio	r2,0(r3)

    while ((IORD(SHA_BASE, 25) & 0x1) == 0);
    80d0:	00801904 	movi	r2,100
    80d4:	10800037 	ldwio	r2,0(r2)
    80d8:	1080004c 	andi	r2,r2,1
    80dc:	1005003a 	cmpeq	r2,r2,zero
    80e0:	103ffb1e 	bne	r2,zero,80d0 <send_input_to_sha+0x74>
}
    80e4:	e037883a 	mov	sp,fp
    80e8:	df000017 	ldw	fp,0(sp)
    80ec:	dec00104 	addi	sp,sp,4
    80f0:	f800283a 	ret

000080f4 <read_and_print_hash>:

void read_and_print_hash() {
    80f4:	defff404 	addi	sp,sp,-48
    80f8:	dfc00b15 	stw	ra,44(sp)
    80fc:	df000a15 	stw	fp,40(sp)
    8100:	df000a04 	addi	fp,sp,40
    uint32_t hash[8];
    int i;
    for (i = 0; i < 8; i++) {
    8104:	e03ff715 	stw	zero,-36(fp)
    8108:	00001006 	br	814c <read_and_print_hash+0x58>
        hash[i] = IORD(SHA_BASE, 16 + i);
    810c:	e13ff717 	ldw	r4,-36(fp)
    8110:	e0bff717 	ldw	r2,-36(fp)
    8114:	1085883a 	add	r2,r2,r2
    8118:	1085883a 	add	r2,r2,r2
    811c:	10801004 	addi	r2,r2,64
    8120:	10800037 	ldwio	r2,0(r2)
    8124:	1007883a 	mov	r3,r2
    8128:	2105883a 	add	r2,r4,r4
    812c:	1085883a 	add	r2,r2,r2
    8130:	e13ff704 	addi	r4,fp,-36
    8134:	1105883a 	add	r2,r2,r4
    8138:	10800104 	addi	r2,r2,4
    813c:	10c00015 	stw	r3,0(r2)
}

void read_and_print_hash() {
    uint32_t hash[8];
    int i;
    for (i = 0; i < 8; i++) {
    8140:	e0bff717 	ldw	r2,-36(fp)
    8144:	10800044 	addi	r2,r2,1
    8148:	e0bff715 	stw	r2,-36(fp)
    814c:	e0bff717 	ldw	r2,-36(fp)
    8150:	10800210 	cmplti	r2,r2,8
    8154:	103fed1e 	bne	r2,zero,810c <read_and_print_hash+0x18>
        hash[i] = IORD(SHA_BASE, 16 + i);
    }

    printf("SHA-256 hash:\n");
    8158:	01000074 	movhi	r4,1
    815c:	2128f704 	addi	r4,r4,-23588
    8160:	000840c0 	call	840c <puts>
    for (i = 0; i < 8; i++) {
    8164:	e03ff715 	stw	zero,-36(fp)
    8168:	00001506 	br	81c0 <read_and_print_hash+0xcc>
        printf("Hash[%d] (addr %2d - 0x%08X): 0x%08" PRIx32 "\n",
    816c:	e0bff717 	ldw	r2,-36(fp)
    8170:	11800404 	addi	r6,r2,16
    8174:	e0bff717 	ldw	r2,-36(fp)
    8178:	1085883a 	add	r2,r2,r2
    817c:	1085883a 	add	r2,r2,r2
    8180:	11c01004 	addi	r7,r2,64
    8184:	e0bff717 	ldw	r2,-36(fp)
    8188:	1085883a 	add	r2,r2,r2
    818c:	1085883a 	add	r2,r2,r2
    8190:	e0fff704 	addi	r3,fp,-36
    8194:	10c5883a 	add	r2,r2,r3
    8198:	10800104 	addi	r2,r2,4
    819c:	10800017 	ldw	r2,0(r2)
    81a0:	d8800015 	stw	r2,0(sp)
    81a4:	01000074 	movhi	r4,1
    81a8:	2128fb04 	addi	r4,r4,-23572
    81ac:	e17ff717 	ldw	r5,-36(fp)
    81b0:	00082c00 	call	82c0 <printf>
    for (i = 0; i < 8; i++) {
        hash[i] = IORD(SHA_BASE, 16 + i);
    }

    printf("SHA-256 hash:\n");
    for (i = 0; i < 8; i++) {
    81b4:	e0bff717 	ldw	r2,-36(fp)
    81b8:	10800044 	addi	r2,r2,1
    81bc:	e0bff715 	stw	r2,-36(fp)
    81c0:	e0bff717 	ldw	r2,-36(fp)
    81c4:	10800210 	cmplti	r2,r2,8
    81c8:	103fe81e 	bne	r2,zero,816c <read_and_print_hash+0x78>
        printf("Hash[%d] (addr %2d - 0x%08X): 0x%08" PRIx32 "\n",
               i, 16 + i, SHA_BASE + (16 + i) * 4, hash[i]);
    }
    printf("\n");
    81cc:	01000284 	movi	r4,10
    81d0:	00083580 	call	8358 <putchar>
}
    81d4:	e037883a 	mov	sp,fp
    81d8:	dfc00117 	ldw	ra,4(sp)
    81dc:	df000017 	ldw	fp,0(sp)
    81e0:	dec00204 	addi	sp,sp,8
    81e4:	f800283a 	ret

000081e8 <main>:

int main() {
    81e8:	defff804 	addi	sp,sp,-32
    81ec:	dfc00715 	stw	ra,28(sp)
    81f0:	df000615 	stw	fp,24(sp)
    81f4:	df000604 	addi	fp,sp,24
         0x00000000,0x00000000,0x00000000,0x00000000,
         0x00000000,0x00000000,0x00000000,0x00000000,
         0x00000000,0x00000000,0x6c6f6780,0x76657269}  // "verilog"
    };

    const char *input_names[] = {"\"abc\"", "\"hello\"", "\"test\"", "\"openai\"", "\"verilog\""};
    81f8:	00800074 	movhi	r2,1
    81fc:	10a95504 	addi	r2,r2,-23212
    8200:	e0bffb15 	stw	r2,-20(fp)
    8204:	00800074 	movhi	r2,1
    8208:	10a95704 	addi	r2,r2,-23204
    820c:	e0bffc15 	stw	r2,-16(fp)
    8210:	00800074 	movhi	r2,1
    8214:	10a95904 	addi	r2,r2,-23196
    8218:	e0bffd15 	stw	r2,-12(fp)
    821c:	00800074 	movhi	r2,1
    8220:	10a95b04 	addi	r2,r2,-23188
    8224:	e0bffe15 	stw	r2,-8(fp)
    8228:	00800074 	movhi	r2,1
    822c:	10a95e04 	addi	r2,r2,-23176
    8230:	e0bfff15 	stw	r2,-4(fp)

    int k;
    for (k = 0; k < 5; k++) {
    8234:	e03ffa15 	stw	zero,-24(fp)
    8238:	00001806 	br	829c <main+0xb4>
        printf("Processing input %d: %s\n", k + 1, input_names[k]);
    823c:	e0bffa17 	ldw	r2,-24(fp)
    8240:	11400044 	addi	r5,r2,1
    8244:	e0bffa17 	ldw	r2,-24(fp)
    8248:	1085883a 	add	r2,r2,r2
    824c:	1085883a 	add	r2,r2,r2
    8250:	e0fffa04 	addi	r3,fp,-24
    8254:	10c5883a 	add	r2,r2,r3
    8258:	10800104 	addi	r2,r2,4
    825c:	11800017 	ldw	r6,0(r2)
    8260:	01000074 	movhi	r4,1
    8264:	21296104 	addi	r4,r4,-23164
    8268:	00082c00 	call	82c0 <printf>
        send_input_to_sha(inputs[k]);
    826c:	e0bffa17 	ldw	r2,-24(fp)
    8270:	100491ba 	slli	r2,r2,6
    8274:	1007883a 	mov	r3,r2
    8278:	00800074 	movhi	r2,1
    827c:	10a90504 	addi	r2,r2,-23532
    8280:	1885883a 	add	r2,r3,r2
    8284:	1009883a 	mov	r4,r2
    8288:	000805c0 	call	805c <send_input_to_sha>
        read_and_print_hash();
    828c:	00080f40 	call	80f4 <read_and_print_hash>
    };

    const char *input_names[] = {"\"abc\"", "\"hello\"", "\"test\"", "\"openai\"", "\"verilog\""};

    int k;
    for (k = 0; k < 5; k++) {
    8290:	e0bffa17 	ldw	r2,-24(fp)
    8294:	10800044 	addi	r2,r2,1
    8298:	e0bffa15 	stw	r2,-24(fp)
    829c:	e0bffa17 	ldw	r2,-24(fp)
    82a0:	10800150 	cmplti	r2,r2,5
    82a4:	103fe51e 	bne	r2,zero,823c <main+0x54>
        printf("Processing input %d: %s\n", k + 1, input_names[k]);
        send_input_to_sha(inputs[k]);
        read_and_print_hash();
    }

    return 0;
    82a8:	0005883a 	mov	r2,zero
}
    82ac:	e037883a 	mov	sp,fp
    82b0:	dfc00117 	ldw	ra,4(sp)
    82b4:	df000017 	ldw	fp,0(sp)
    82b8:	dec00204 	addi	sp,sp,8
    82bc:	f800283a 	ret

000082c0 <printf>:
    82c0:	defffb04 	addi	sp,sp,-20
    82c4:	dfc00115 	stw	ra,4(sp)
    82c8:	d9400215 	stw	r5,8(sp)
    82cc:	d9800315 	stw	r6,12(sp)
    82d0:	d9c00415 	stw	r7,16(sp)
    82d4:	00800074 	movhi	r2,1
    82d8:	10aa2304 	addi	r2,r2,-22388
    82dc:	11400017 	ldw	r5,0(r2)
    82e0:	d8800204 	addi	r2,sp,8
    82e4:	d8800015 	stw	r2,0(sp)
    82e8:	29c00217 	ldw	r7,8(r5)
    82ec:	100d883a 	mov	r6,r2
    82f0:	00800074 	movhi	r2,1
    82f4:	10a2e004 	addi	r2,r2,-29824
    82f8:	200b883a 	mov	r5,r4
    82fc:	38800115 	stw	r2,4(r7)
    8300:	3809883a 	mov	r4,r7
    8304:	0008b5c0 	call	8b5c <__vfprintf_internal>
    8308:	dfc00117 	ldw	ra,4(sp)
    830c:	dec00504 	addi	sp,sp,20
    8310:	f800283a 	ret

00008314 <_printf_r>:
    8314:	defffc04 	addi	sp,sp,-16
    8318:	dfc00115 	stw	ra,4(sp)
    831c:	d9800215 	stw	r6,8(sp)
    8320:	d9c00315 	stw	r7,12(sp)
    8324:	22000217 	ldw	r8,8(r4)
    8328:	d8800204 	addi	r2,sp,8
    832c:	d8800015 	stw	r2,0(sp)
    8330:	100f883a 	mov	r7,r2
    8334:	00800074 	movhi	r2,1
    8338:	10a2e004 	addi	r2,r2,-29824
    833c:	280d883a 	mov	r6,r5
    8340:	40800115 	stw	r2,4(r8)
    8344:	400b883a 	mov	r5,r8
    8348:	00084c00 	call	84c0 <___vfprintf_internal_r>
    834c:	dfc00117 	ldw	ra,4(sp)
    8350:	dec00404 	addi	sp,sp,16
    8354:	f800283a 	ret

00008358 <putchar>:
    8358:	00800074 	movhi	r2,1
    835c:	10aa2304 	addi	r2,r2,-22388
    8360:	11800017 	ldw	r6,0(r2)
    8364:	200b883a 	mov	r5,r4
    8368:	3009883a 	mov	r4,r6
    836c:	31800217 	ldw	r6,8(r6)
    8370:	0008cac1 	jmpi	8cac <_putc_r>

00008374 <_putchar_r>:
    8374:	21800217 	ldw	r6,8(r4)
    8378:	0008cac1 	jmpi	8cac <_putc_r>

0000837c <_puts_r>:
    837c:	defffd04 	addi	sp,sp,-12
    8380:	dc000015 	stw	r16,0(sp)
    8384:	2021883a 	mov	r16,r4
    8388:	2809883a 	mov	r4,r5
    838c:	dfc00215 	stw	ra,8(sp)
    8390:	dc400115 	stw	r17,4(sp)
    8394:	2823883a 	mov	r17,r5
    8398:	00084200 	call	8420 <strlen>
    839c:	80c00217 	ldw	r3,8(r16)
    83a0:	02000074 	movhi	r8,1
    83a4:	4222e004 	addi	r8,r8,-29824
    83a8:	880d883a 	mov	r6,r17
    83ac:	100f883a 	mov	r7,r2
    83b0:	8009883a 	mov	r4,r16
    83b4:	180b883a 	mov	r5,r3
    83b8:	1a000115 	stw	r8,4(r3)
    83bc:	403ee83a 	callr	r8
    83c0:	047fffc4 	movi	r17,-1
    83c4:	8009883a 	mov	r4,r16
    83c8:	01800074 	movhi	r6,1
    83cc:	31a96804 	addi	r6,r6,-23136
    83d0:	01c00044 	movi	r7,1
    83d4:	1440071e 	bne	r2,r17,83f4 <_puts_r+0x78>
    83d8:	00ffffc4 	movi	r3,-1
    83dc:	1805883a 	mov	r2,r3
    83e0:	dfc00217 	ldw	ra,8(sp)
    83e4:	dc400117 	ldw	r17,4(sp)
    83e8:	dc000017 	ldw	r16,0(sp)
    83ec:	dec00304 	addi	sp,sp,12
    83f0:	f800283a 	ret
    83f4:	81400217 	ldw	r5,8(r16)
    83f8:	28c00117 	ldw	r3,4(r5)
    83fc:	183ee83a 	callr	r3
    8400:	0007883a 	mov	r3,zero
    8404:	147ff51e 	bne	r2,r17,83dc <_puts_r+0x60>
    8408:	003ff306 	br	83d8 <_puts_r+0x5c>

0000840c <puts>:
    840c:	00800074 	movhi	r2,1
    8410:	10aa2304 	addi	r2,r2,-22388
    8414:	200b883a 	mov	r5,r4
    8418:	11000017 	ldw	r4,0(r2)
    841c:	000837c1 	jmpi	837c <_puts_r>

00008420 <strlen>:
    8420:	20800007 	ldb	r2,0(r4)
    8424:	10000526 	beq	r2,zero,843c <strlen+0x1c>
    8428:	2007883a 	mov	r3,r4
    842c:	18c00044 	addi	r3,r3,1
    8430:	18800007 	ldb	r2,0(r3)
    8434:	103ffd1e 	bne	r2,zero,842c <strlen+0xc>
    8438:	1905c83a 	sub	r2,r3,r4
    843c:	f800283a 	ret

00008440 <print_repeat>:
    8440:	defffb04 	addi	sp,sp,-20
    8444:	dc800315 	stw	r18,12(sp)
    8448:	dc400215 	stw	r17,8(sp)
    844c:	dc000115 	stw	r16,4(sp)
    8450:	dfc00415 	stw	ra,16(sp)
    8454:	2025883a 	mov	r18,r4
    8458:	2823883a 	mov	r17,r5
    845c:	3821883a 	mov	r16,r7
    8460:	d9800005 	stb	r6,0(sp)
    8464:	9009883a 	mov	r4,r18
    8468:	880b883a 	mov	r5,r17
    846c:	d80d883a 	mov	r6,sp
    8470:	01c00044 	movi	r7,1
    8474:	04000b0e 	bge	zero,r16,84a4 <print_repeat+0x64>
    8478:	88c00117 	ldw	r3,4(r17)
    847c:	843fffc4 	addi	r16,r16,-1
    8480:	183ee83a 	callr	r3
    8484:	103ff726 	beq	r2,zero,8464 <print_repeat+0x24>
    8488:	00bfffc4 	movi	r2,-1
    848c:	dfc00417 	ldw	ra,16(sp)
    8490:	dc800317 	ldw	r18,12(sp)
    8494:	dc400217 	ldw	r17,8(sp)
    8498:	dc000117 	ldw	r16,4(sp)
    849c:	dec00504 	addi	sp,sp,20
    84a0:	f800283a 	ret
    84a4:	0005883a 	mov	r2,zero
    84a8:	dfc00417 	ldw	ra,16(sp)
    84ac:	dc800317 	ldw	r18,12(sp)
    84b0:	dc400217 	ldw	r17,8(sp)
    84b4:	dc000117 	ldw	r16,4(sp)
    84b8:	dec00504 	addi	sp,sp,20
    84bc:	f800283a 	ret

000084c0 <___vfprintf_internal_r>:
    84c0:	deffe304 	addi	sp,sp,-116
    84c4:	df001b15 	stw	fp,108(sp)
    84c8:	ddc01a15 	stw	r23,104(sp)
    84cc:	dd001715 	stw	r20,92(sp)
    84d0:	dc801515 	stw	r18,84(sp)
    84d4:	dc001315 	stw	r16,76(sp)
    84d8:	dfc01c15 	stw	ra,112(sp)
    84dc:	dd801915 	stw	r22,100(sp)
    84e0:	dd401815 	stw	r21,96(sp)
    84e4:	dcc01615 	stw	r19,88(sp)
    84e8:	dc401415 	stw	r17,80(sp)
    84ec:	d9001015 	stw	r4,64(sp)
    84f0:	2829883a 	mov	r20,r5
    84f4:	d9c01115 	stw	r7,68(sp)
    84f8:	3025883a 	mov	r18,r6
    84fc:	0021883a 	mov	r16,zero
    8500:	d8000f15 	stw	zero,60(sp)
    8504:	d8000e15 	stw	zero,56(sp)
    8508:	0039883a 	mov	fp,zero
    850c:	d8000915 	stw	zero,36(sp)
    8510:	d8000d15 	stw	zero,52(sp)
    8514:	d8000c15 	stw	zero,48(sp)
    8518:	d8000b15 	stw	zero,44(sp)
    851c:	002f883a 	mov	r23,zero
    8520:	91400003 	ldbu	r5,0(r18)
    8524:	01c00044 	movi	r7,1
    8528:	94800044 	addi	r18,r18,1
    852c:	29003fcc 	andi	r4,r5,255
    8530:	2100201c 	xori	r4,r4,128
    8534:	213fe004 	addi	r4,r4,-128
    8538:	20001526 	beq	r4,zero,8590 <___vfprintf_internal_r+0xd0>
    853c:	81c03526 	beq	r16,r7,8614 <___vfprintf_internal_r+0x154>
    8540:	3c002016 	blt	r7,r16,85c4 <___vfprintf_internal_r+0x104>
    8544:	803ff61e 	bne	r16,zero,8520 <___vfprintf_internal_r+0x60>
    8548:	00800944 	movi	r2,37
    854c:	2081501e 	bne	r4,r2,8a90 <___vfprintf_internal_r+0x5d0>
    8550:	073fffc4 	movi	fp,-1
    8554:	00800284 	movi	r2,10
    8558:	d9c00c15 	stw	r7,48(sp)
    855c:	d8000f15 	stw	zero,60(sp)
    8560:	d8000e15 	stw	zero,56(sp)
    8564:	df000915 	stw	fp,36(sp)
    8568:	d8800d15 	stw	r2,52(sp)
    856c:	d8000b15 	stw	zero,44(sp)
    8570:	91400003 	ldbu	r5,0(r18)
    8574:	3821883a 	mov	r16,r7
    8578:	94800044 	addi	r18,r18,1
    857c:	29003fcc 	andi	r4,r5,255
    8580:	2100201c 	xori	r4,r4,128
    8584:	213fe004 	addi	r4,r4,-128
    8588:	01c00044 	movi	r7,1
    858c:	203feb1e 	bne	r4,zero,853c <___vfprintf_internal_r+0x7c>
    8590:	b805883a 	mov	r2,r23
    8594:	dfc01c17 	ldw	ra,112(sp)
    8598:	df001b17 	ldw	fp,108(sp)
    859c:	ddc01a17 	ldw	r23,104(sp)
    85a0:	dd801917 	ldw	r22,100(sp)
    85a4:	dd401817 	ldw	r21,96(sp)
    85a8:	dd001717 	ldw	r20,92(sp)
    85ac:	dcc01617 	ldw	r19,88(sp)
    85b0:	dc801517 	ldw	r18,84(sp)
    85b4:	dc401417 	ldw	r17,80(sp)
    85b8:	dc001317 	ldw	r16,76(sp)
    85bc:	dec01d04 	addi	sp,sp,116
    85c0:	f800283a 	ret
    85c4:	00800084 	movi	r2,2
    85c8:	80801726 	beq	r16,r2,8628 <___vfprintf_internal_r+0x168>
    85cc:	008000c4 	movi	r2,3
    85d0:	80bfd31e 	bne	r16,r2,8520 <___vfprintf_internal_r+0x60>
    85d4:	2c7ff404 	addi	r17,r5,-48
    85d8:	88c03fcc 	andi	r3,r17,255
    85dc:	00800244 	movi	r2,9
    85e0:	10c02136 	bltu	r2,r3,8668 <___vfprintf_internal_r+0x1a8>
    85e4:	d8c00917 	ldw	r3,36(sp)
    85e8:	18012716 	blt	r3,zero,8a88 <___vfprintf_internal_r+0x5c8>
    85ec:	d9000917 	ldw	r4,36(sp)
    85f0:	01400284 	movi	r5,10
    85f4:	0008ee40 	call	8ee4 <__mulsi3>
    85f8:	1007883a 	mov	r3,r2
    85fc:	88803fcc 	andi	r2,r17,255
    8600:	1080201c 	xori	r2,r2,128
    8604:	10bfe004 	addi	r2,r2,-128
    8608:	1887883a 	add	r3,r3,r2
    860c:	d8c00915 	stw	r3,36(sp)
    8610:	003fc306 	br	8520 <___vfprintf_internal_r+0x60>
    8614:	00800c04 	movi	r2,48
    8618:	2080b326 	beq	r4,r2,88e8 <___vfprintf_internal_r+0x428>
    861c:	00800944 	movi	r2,37
    8620:	20812726 	beq	r4,r2,8ac0 <___vfprintf_internal_r+0x600>
    8624:	04000084 	movi	r16,2
    8628:	2c7ff404 	addi	r17,r5,-48
    862c:	88c03fcc 	andi	r3,r17,255
    8630:	00800244 	movi	r2,9
    8634:	10c00a36 	bltu	r2,r3,8660 <___vfprintf_internal_r+0x1a0>
    8638:	e000b416 	blt	fp,zero,890c <___vfprintf_internal_r+0x44c>
    863c:	e009883a 	mov	r4,fp
    8640:	01400284 	movi	r5,10
    8644:	0008ee40 	call	8ee4 <__mulsi3>
    8648:	1007883a 	mov	r3,r2
    864c:	88803fcc 	andi	r2,r17,255
    8650:	1080201c 	xori	r2,r2,128
    8654:	10bfe004 	addi	r2,r2,-128
    8658:	18b9883a 	add	fp,r3,r2
    865c:	003fb006 	br	8520 <___vfprintf_internal_r+0x60>
    8660:	00800b84 	movi	r2,46
    8664:	2080a326 	beq	r4,r2,88f4 <___vfprintf_internal_r+0x434>
    8668:	00801b04 	movi	r2,108
    866c:	2080a326 	beq	r4,r2,88fc <___vfprintf_internal_r+0x43c>
    8670:	d8c00917 	ldw	r3,36(sp)
    8674:	1800a716 	blt	r3,zero,8914 <___vfprintf_internal_r+0x454>
    8678:	d8000f15 	stw	zero,60(sp)
    867c:	28bfea04 	addi	r2,r5,-88
    8680:	10803fcc 	andi	r2,r2,255
    8684:	00c00804 	movi	r3,32
    8688:	18802836 	bltu	r3,r2,872c <___vfprintf_internal_r+0x26c>
    868c:	1085883a 	add	r2,r2,r2
    8690:	1085883a 	add	r2,r2,r2
    8694:	00c00074 	movhi	r3,1
    8698:	18e1aa04 	addi	r3,r3,-31064
    869c:	10c5883a 	add	r2,r2,r3
    86a0:	11000017 	ldw	r4,0(r2)
    86a4:	2000683a 	jmp	r4
    86a8:	00008734 	movhi	zero,540
    86ac:	0000872c 	andhi	zero,zero,540
    86b0:	0000872c 	andhi	zero,zero,540
    86b4:	0000872c 	andhi	zero,zero,540
    86b8:	0000872c 	andhi	zero,zero,540
    86bc:	0000872c 	andhi	zero,zero,540
    86c0:	0000872c 	andhi	zero,zero,540
    86c4:	0000872c 	andhi	zero,zero,540
    86c8:	0000872c 	andhi	zero,zero,540
    86cc:	0000872c 	andhi	zero,zero,540
    86d0:	0000872c 	andhi	zero,zero,540
    86d4:	00008960 	cmpeqi	zero,zero,549
    86d8:	00008748 	cmpgei	zero,zero,541
    86dc:	0000872c 	andhi	zero,zero,540
    86e0:	0000872c 	andhi	zero,zero,540
    86e4:	0000872c 	andhi	zero,zero,540
    86e8:	0000872c 	andhi	zero,zero,540
    86ec:	00008748 	cmpgei	zero,zero,541
    86f0:	0000872c 	andhi	zero,zero,540
    86f4:	0000872c 	andhi	zero,zero,540
    86f8:	0000872c 	andhi	zero,zero,540
    86fc:	0000872c 	andhi	zero,zero,540
    8700:	0000872c 	andhi	zero,zero,540
    8704:	000089c8 	cmpgei	zero,zero,551
    8708:	0000872c 	andhi	zero,zero,540
    870c:	0000872c 	andhi	zero,zero,540
    8710:	0000872c 	andhi	zero,zero,540
    8714:	000089d8 	cmpnei	zero,zero,551
    8718:	0000872c 	andhi	zero,zero,540
    871c:	000088ac 	andhi	zero,zero,546
    8720:	0000872c 	andhi	zero,zero,540
    8724:	0000872c 	andhi	zero,zero,540
    8728:	000088a4 	muli	zero,zero,546
    872c:	0021883a 	mov	r16,zero
    8730:	003f7b06 	br	8520 <___vfprintf_internal_r+0x60>
    8734:	00c00404 	movi	r3,16
    8738:	00800044 	movi	r2,1
    873c:	d8c00d15 	stw	r3,52(sp)
    8740:	d8000c15 	stw	zero,48(sp)
    8744:	d8800b15 	stw	r2,44(sp)
    8748:	d8c00e17 	ldw	r3,56(sp)
    874c:	1805003a 	cmpeq	r2,r3,zero
    8750:	10005a1e 	bne	r2,zero,88bc <___vfprintf_internal_r+0x3fc>
    8754:	d8800c17 	ldw	r2,48(sp)
    8758:	1000781e 	bne	r2,zero,893c <___vfprintf_internal_r+0x47c>
    875c:	d8801117 	ldw	r2,68(sp)
    8760:	d8000a15 	stw	zero,40(sp)
    8764:	14400017 	ldw	r17,0(r2)
    8768:	11c00104 	addi	r7,r2,4
    876c:	d9c01115 	stw	r7,68(sp)
    8770:	88005a26 	beq	r17,zero,88dc <___vfprintf_internal_r+0x41c>
    8774:	d8c00b17 	ldw	r3,44(sp)
    8778:	dcc00044 	addi	r19,sp,1
    877c:	05800244 	movi	r22,9
    8780:	182b003a 	cmpeq	r21,r3,zero
    8784:	dcc01215 	stw	r19,72(sp)
    8788:	00000506 	br	87a0 <___vfprintf_internal_r+0x2e0>
    878c:	21000c04 	addi	r4,r4,48
    8790:	99000005 	stb	r4,0(r19)
    8794:	9cc00044 	addi	r19,r19,1
    8798:	80000f26 	beq	r16,zero,87d8 <___vfprintf_internal_r+0x318>
    879c:	8023883a 	mov	r17,r16
    87a0:	d9400d17 	ldw	r5,52(sp)
    87a4:	8809883a 	mov	r4,r17
    87a8:	0008ed40 	call	8ed4 <__udivsi3>
    87ac:	d9000d17 	ldw	r4,52(sp)
    87b0:	100b883a 	mov	r5,r2
    87b4:	1021883a 	mov	r16,r2
    87b8:	0008ee40 	call	8ee4 <__mulsi3>
    87bc:	8889c83a 	sub	r4,r17,r2
    87c0:	b13ff20e 	bge	r22,r4,878c <___vfprintf_internal_r+0x2cc>
    87c4:	a8009f1e 	bne	r21,zero,8a44 <___vfprintf_internal_r+0x584>
    87c8:	21000dc4 	addi	r4,r4,55
    87cc:	99000005 	stb	r4,0(r19)
    87d0:	9cc00044 	addi	r19,r19,1
    87d4:	803ff11e 	bne	r16,zero,879c <___vfprintf_internal_r+0x2dc>
    87d8:	d8801217 	ldw	r2,72(sp)
    87dc:	98a3c83a 	sub	r17,r19,r2
    87e0:	d8c00917 	ldw	r3,36(sp)
    87e4:	1c4bc83a 	sub	r5,r3,r17
    87e8:	0140130e 	bge	zero,r5,8838 <___vfprintf_internal_r+0x378>
    87ec:	d8c00044 	addi	r3,sp,1
    87f0:	18800804 	addi	r2,r3,32
    87f4:	9880102e 	bgeu	r19,r2,8838 <___vfprintf_internal_r+0x378>
    87f8:	00800c04 	movi	r2,48
    87fc:	28ffffc4 	addi	r3,r5,-1
    8800:	98800005 	stb	r2,0(r19)
    8804:	99000044 	addi	r4,r19,1
    8808:	00c0080e 	bge	zero,r3,882c <___vfprintf_internal_r+0x36c>
    880c:	d8c00044 	addi	r3,sp,1
    8810:	18800804 	addi	r2,r3,32
    8814:	2080052e 	bgeu	r4,r2,882c <___vfprintf_internal_r+0x36c>
    8818:	00800c04 	movi	r2,48
    881c:	20800005 	stb	r2,0(r4)
    8820:	21000044 	addi	r4,r4,1
    8824:	9945883a 	add	r2,r19,r5
    8828:	20bff81e 	bne	r4,r2,880c <___vfprintf_internal_r+0x34c>
    882c:	d8801217 	ldw	r2,72(sp)
    8830:	2027883a 	mov	r19,r4
    8834:	20a3c83a 	sub	r17,r4,r2
    8838:	d8c00a17 	ldw	r3,40(sp)
    883c:	1c45883a 	add	r2,r3,r17
    8840:	e0a1c83a 	sub	r16,fp,r2
    8844:	d8800f17 	ldw	r2,60(sp)
    8848:	10008026 	beq	r2,zero,8a4c <___vfprintf_internal_r+0x58c>
    884c:	1805003a 	cmpeq	r2,r3,zero
    8850:	1000ae26 	beq	r2,zero,8b0c <___vfprintf_internal_r+0x64c>
    8854:	0400a516 	blt	zero,r16,8aec <___vfprintf_internal_r+0x62c>
    8858:	b805883a 	mov	r2,r23
    885c:	0440950e 	bge	zero,r17,8ab4 <___vfprintf_internal_r+0x5f4>
    8860:	102f883a 	mov	r23,r2
    8864:	1461883a 	add	r16,r2,r17
    8868:	00000206 	br	8874 <___vfprintf_internal_r+0x3b4>
    886c:	bdc00044 	addi	r23,r23,1
    8870:	85ffae26 	beq	r16,r23,872c <___vfprintf_internal_r+0x26c>
    8874:	9cffffc4 	addi	r19,r19,-1
    8878:	98800003 	ldbu	r2,0(r19)
    887c:	a0c00117 	ldw	r3,4(r20)
    8880:	d9001017 	ldw	r4,64(sp)
    8884:	d8800005 	stb	r2,0(sp)
    8888:	a00b883a 	mov	r5,r20
    888c:	d80d883a 	mov	r6,sp
    8890:	01c00044 	movi	r7,1
    8894:	183ee83a 	callr	r3
    8898:	103ff426 	beq	r2,zero,886c <___vfprintf_internal_r+0x3ac>
    889c:	05ffffc4 	movi	r23,-1
    88a0:	003f3b06 	br	8590 <___vfprintf_internal_r+0xd0>
    88a4:	00c00404 	movi	r3,16
    88a8:	d8c00d15 	stw	r3,52(sp)
    88ac:	d8000c15 	stw	zero,48(sp)
    88b0:	d8c00e17 	ldw	r3,56(sp)
    88b4:	1805003a 	cmpeq	r2,r3,zero
    88b8:	103fa626 	beq	r2,zero,8754 <___vfprintf_internal_r+0x294>
    88bc:	d8c00c17 	ldw	r3,48(sp)
    88c0:	1800171e 	bne	r3,zero,8920 <___vfprintf_internal_r+0x460>
    88c4:	d8c01117 	ldw	r3,68(sp)
    88c8:	d8000a15 	stw	zero,40(sp)
    88cc:	1c400017 	ldw	r17,0(r3)
    88d0:	19c00104 	addi	r7,r3,4
    88d4:	d9c01115 	stw	r7,68(sp)
    88d8:	883fa61e 	bne	r17,zero,8774 <___vfprintf_internal_r+0x2b4>
    88dc:	dcc00044 	addi	r19,sp,1
    88e0:	dcc01215 	stw	r19,72(sp)
    88e4:	003fbe06 	br	87e0 <___vfprintf_internal_r+0x320>
    88e8:	04000084 	movi	r16,2
    88ec:	d9c00f15 	stw	r7,60(sp)
    88f0:	003f0b06 	br	8520 <___vfprintf_internal_r+0x60>
    88f4:	040000c4 	movi	r16,3
    88f8:	003f0906 	br	8520 <___vfprintf_internal_r+0x60>
    88fc:	00800044 	movi	r2,1
    8900:	040000c4 	movi	r16,3
    8904:	d8800e15 	stw	r2,56(sp)
    8908:	003f0506 	br	8520 <___vfprintf_internal_r+0x60>
    890c:	0007883a 	mov	r3,zero
    8910:	003f4e06 	br	864c <___vfprintf_internal_r+0x18c>
    8914:	00800044 	movi	r2,1
    8918:	d8800915 	stw	r2,36(sp)
    891c:	003f5706 	br	867c <___vfprintf_internal_r+0x1bc>
    8920:	d8801117 	ldw	r2,68(sp)
    8924:	14400017 	ldw	r17,0(r2)
    8928:	10800104 	addi	r2,r2,4
    892c:	d8801115 	stw	r2,68(sp)
    8930:	88000716 	blt	r17,zero,8950 <___vfprintf_internal_r+0x490>
    8934:	d8000a15 	stw	zero,40(sp)
    8938:	003f8d06 	br	8770 <___vfprintf_internal_r+0x2b0>
    893c:	d8c01117 	ldw	r3,68(sp)
    8940:	1c400017 	ldw	r17,0(r3)
    8944:	18c00104 	addi	r3,r3,4
    8948:	d8c01115 	stw	r3,68(sp)
    894c:	883ff90e 	bge	r17,zero,8934 <___vfprintf_internal_r+0x474>
    8950:	00800044 	movi	r2,1
    8954:	0463c83a 	sub	r17,zero,r17
    8958:	d8800a15 	stw	r2,40(sp)
    895c:	003f8406 	br	8770 <___vfprintf_internal_r+0x2b0>
    8960:	04000044 	movi	r16,1
    8964:	8700080e 	bge	r16,fp,8988 <___vfprintf_internal_r+0x4c8>
    8968:	d9001017 	ldw	r4,64(sp)
    896c:	a00b883a 	mov	r5,r20
    8970:	01800804 	movi	r6,32
    8974:	e1ffffc4 	addi	r7,fp,-1
    8978:	00084400 	call	8440 <print_repeat>
    897c:	103fc71e 	bne	r2,zero,889c <___vfprintf_internal_r+0x3dc>
    8980:	e5c5883a 	add	r2,fp,r23
    8984:	15ffffc4 	addi	r23,r2,-1
    8988:	d8c01117 	ldw	r3,68(sp)
    898c:	d9001017 	ldw	r4,64(sp)
    8990:	800f883a 	mov	r7,r16
    8994:	18800017 	ldw	r2,0(r3)
    8998:	a0c00117 	ldw	r3,4(r20)
    899c:	a00b883a 	mov	r5,r20
    89a0:	d8800005 	stb	r2,0(sp)
    89a4:	d80d883a 	mov	r6,sp
    89a8:	183ee83a 	callr	r3
    89ac:	103fbb1e 	bne	r2,zero,889c <___vfprintf_internal_r+0x3dc>
    89b0:	d8801117 	ldw	r2,68(sp)
    89b4:	bdc00044 	addi	r23,r23,1
    89b8:	0021883a 	mov	r16,zero
    89bc:	10800104 	addi	r2,r2,4
    89c0:	d8801115 	stw	r2,68(sp)
    89c4:	003ed606 	br	8520 <___vfprintf_internal_r+0x60>
    89c8:	00800204 	movi	r2,8
    89cc:	d8800d15 	stw	r2,52(sp)
    89d0:	d8000c15 	stw	zero,48(sp)
    89d4:	003fb606 	br	88b0 <___vfprintf_internal_r+0x3f0>
    89d8:	d8c01117 	ldw	r3,68(sp)
    89dc:	1cc00017 	ldw	r19,0(r3)
    89e0:	9809883a 	mov	r4,r19
    89e4:	00084200 	call	8420 <strlen>
    89e8:	e0a1c83a 	sub	r16,fp,r2
    89ec:	1023883a 	mov	r17,r2
    89f0:	0400070e 	bge	zero,r16,8a10 <___vfprintf_internal_r+0x550>
    89f4:	d9001017 	ldw	r4,64(sp)
    89f8:	a00b883a 	mov	r5,r20
    89fc:	01800804 	movi	r6,32
    8a00:	800f883a 	mov	r7,r16
    8a04:	00084400 	call	8440 <print_repeat>
    8a08:	103fa41e 	bne	r2,zero,889c <___vfprintf_internal_r+0x3dc>
    8a0c:	bc2f883a 	add	r23,r23,r16
    8a10:	a0c00117 	ldw	r3,4(r20)
    8a14:	d9001017 	ldw	r4,64(sp)
    8a18:	980d883a 	mov	r6,r19
    8a1c:	a00b883a 	mov	r5,r20
    8a20:	880f883a 	mov	r7,r17
    8a24:	183ee83a 	callr	r3
    8a28:	103f9c1e 	bne	r2,zero,889c <___vfprintf_internal_r+0x3dc>
    8a2c:	d8801117 	ldw	r2,68(sp)
    8a30:	bc6f883a 	add	r23,r23,r17
    8a34:	0021883a 	mov	r16,zero
    8a38:	10800104 	addi	r2,r2,4
    8a3c:	d8801115 	stw	r2,68(sp)
    8a40:	003eb706 	br	8520 <___vfprintf_internal_r+0x60>
    8a44:	210015c4 	addi	r4,r4,87
    8a48:	003f5106 	br	8790 <___vfprintf_internal_r+0x2d0>
    8a4c:	04003b16 	blt	zero,r16,8b3c <___vfprintf_internal_r+0x67c>
    8a50:	d8c00a17 	ldw	r3,40(sp)
    8a54:	1805003a 	cmpeq	r2,r3,zero
    8a58:	103f7f1e 	bne	r2,zero,8858 <___vfprintf_internal_r+0x398>
    8a5c:	a0c00117 	ldw	r3,4(r20)
    8a60:	d9001017 	ldw	r4,64(sp)
    8a64:	00800b44 	movi	r2,45
    8a68:	d8800005 	stb	r2,0(sp)
    8a6c:	a00b883a 	mov	r5,r20
    8a70:	d80d883a 	mov	r6,sp
    8a74:	01c00044 	movi	r7,1
    8a78:	183ee83a 	callr	r3
    8a7c:	103f871e 	bne	r2,zero,889c <___vfprintf_internal_r+0x3dc>
    8a80:	b8800044 	addi	r2,r23,1
    8a84:	003f7506 	br	885c <___vfprintf_internal_r+0x39c>
    8a88:	0007883a 	mov	r3,zero
    8a8c:	003edb06 	br	85fc <___vfprintf_internal_r+0x13c>
    8a90:	a0c00117 	ldw	r3,4(r20)
    8a94:	d9001017 	ldw	r4,64(sp)
    8a98:	d9400005 	stb	r5,0(sp)
    8a9c:	d80d883a 	mov	r6,sp
    8aa0:	a00b883a 	mov	r5,r20
    8aa4:	183ee83a 	callr	r3
    8aa8:	103f7c1e 	bne	r2,zero,889c <___vfprintf_internal_r+0x3dc>
    8aac:	bdc00044 	addi	r23,r23,1
    8ab0:	003e9b06 	br	8520 <___vfprintf_internal_r+0x60>
    8ab4:	102f883a 	mov	r23,r2
    8ab8:	0021883a 	mov	r16,zero
    8abc:	003e9806 	br	8520 <___vfprintf_internal_r+0x60>
    8ac0:	a0c00117 	ldw	r3,4(r20)
    8ac4:	d9000005 	stb	r4,0(sp)
    8ac8:	d9001017 	ldw	r4,64(sp)
    8acc:	a00b883a 	mov	r5,r20
    8ad0:	d80d883a 	mov	r6,sp
    8ad4:	800f883a 	mov	r7,r16
    8ad8:	183ee83a 	callr	r3
    8adc:	103f6f1e 	bne	r2,zero,889c <___vfprintf_internal_r+0x3dc>
    8ae0:	bc2f883a 	add	r23,r23,r16
    8ae4:	0021883a 	mov	r16,zero
    8ae8:	003e8d06 	br	8520 <___vfprintf_internal_r+0x60>
    8aec:	d9001017 	ldw	r4,64(sp)
    8af0:	a00b883a 	mov	r5,r20
    8af4:	01800c04 	movi	r6,48
    8af8:	800f883a 	mov	r7,r16
    8afc:	00084400 	call	8440 <print_repeat>
    8b00:	103f661e 	bne	r2,zero,889c <___vfprintf_internal_r+0x3dc>
    8b04:	bc05883a 	add	r2,r23,r16
    8b08:	003f5406 	br	885c <___vfprintf_internal_r+0x39c>
    8b0c:	a0c00117 	ldw	r3,4(r20)
    8b10:	d9001017 	ldw	r4,64(sp)
    8b14:	00800b44 	movi	r2,45
    8b18:	d8800005 	stb	r2,0(sp)
    8b1c:	a00b883a 	mov	r5,r20
    8b20:	d80d883a 	mov	r6,sp
    8b24:	01c00044 	movi	r7,1
    8b28:	183ee83a 	callr	r3
    8b2c:	103f5b1e 	bne	r2,zero,889c <___vfprintf_internal_r+0x3dc>
    8b30:	bdc00044 	addi	r23,r23,1
    8b34:	043f480e 	bge	zero,r16,8858 <___vfprintf_internal_r+0x398>
    8b38:	003fec06 	br	8aec <___vfprintf_internal_r+0x62c>
    8b3c:	d9001017 	ldw	r4,64(sp)
    8b40:	a00b883a 	mov	r5,r20
    8b44:	01800804 	movi	r6,32
    8b48:	800f883a 	mov	r7,r16
    8b4c:	00084400 	call	8440 <print_repeat>
    8b50:	103f521e 	bne	r2,zero,889c <___vfprintf_internal_r+0x3dc>
    8b54:	bc2f883a 	add	r23,r23,r16
    8b58:	003fbd06 	br	8a50 <___vfprintf_internal_r+0x590>

00008b5c <__vfprintf_internal>:
    8b5c:	00800074 	movhi	r2,1
    8b60:	10aa2304 	addi	r2,r2,-22388
    8b64:	2013883a 	mov	r9,r4
    8b68:	11000017 	ldw	r4,0(r2)
    8b6c:	2805883a 	mov	r2,r5
    8b70:	300f883a 	mov	r7,r6
    8b74:	480b883a 	mov	r5,r9
    8b78:	100d883a 	mov	r6,r2
    8b7c:	00084c01 	jmpi	84c0 <___vfprintf_internal_r>

00008b80 <__sfvwrite_small_dev>:
    8b80:	2880000b 	ldhu	r2,0(r5)
    8b84:	defffa04 	addi	sp,sp,-24
    8b88:	dcc00315 	stw	r19,12(sp)
    8b8c:	1080020c 	andi	r2,r2,8
    8b90:	dc800215 	stw	r18,8(sp)
    8b94:	dc400115 	stw	r17,4(sp)
    8b98:	dfc00515 	stw	ra,20(sp)
    8b9c:	dd000415 	stw	r20,16(sp)
    8ba0:	dc000015 	stw	r16,0(sp)
    8ba4:	2825883a 	mov	r18,r5
    8ba8:	2027883a 	mov	r19,r4
    8bac:	3023883a 	mov	r17,r6
    8bb0:	10002026 	beq	r2,zero,8c34 <__sfvwrite_small_dev+0xb4>
    8bb4:	2940008f 	ldh	r5,2(r5)
    8bb8:	28000f16 	blt	r5,zero,8bf8 <__sfvwrite_small_dev+0x78>
    8bbc:	01c01b0e 	bge	zero,r7,8c2c <__sfvwrite_small_dev+0xac>
    8bc0:	3821883a 	mov	r16,r7
    8bc4:	05010004 	movi	r20,1024
    8bc8:	00000206 	br	8bd4 <__sfvwrite_small_dev+0x54>
    8bcc:	0400170e 	bge	zero,r16,8c2c <__sfvwrite_small_dev+0xac>
    8bd0:	9140008f 	ldh	r5,2(r18)
    8bd4:	880d883a 	mov	r6,r17
    8bd8:	9809883a 	mov	r4,r19
    8bdc:	800f883a 	mov	r7,r16
    8be0:	a400010e 	bge	r20,r16,8be8 <__sfvwrite_small_dev+0x68>
    8be4:	01c10004 	movi	r7,1024
    8be8:	0008d200 	call	8d20 <_write_r>
    8bec:	88a3883a 	add	r17,r17,r2
    8bf0:	80a1c83a 	sub	r16,r16,r2
    8bf4:	00bff516 	blt	zero,r2,8bcc <__sfvwrite_small_dev+0x4c>
    8bf8:	9080000b 	ldhu	r2,0(r18)
    8bfc:	00ffffc4 	movi	r3,-1
    8c00:	10801014 	ori	r2,r2,64
    8c04:	9080000d 	sth	r2,0(r18)
    8c08:	1805883a 	mov	r2,r3
    8c0c:	dfc00517 	ldw	ra,20(sp)
    8c10:	dd000417 	ldw	r20,16(sp)
    8c14:	dcc00317 	ldw	r19,12(sp)
    8c18:	dc800217 	ldw	r18,8(sp)
    8c1c:	dc400117 	ldw	r17,4(sp)
    8c20:	dc000017 	ldw	r16,0(sp)
    8c24:	dec00604 	addi	sp,sp,24
    8c28:	f800283a 	ret
    8c2c:	0007883a 	mov	r3,zero
    8c30:	003ff506 	br	8c08 <__sfvwrite_small_dev+0x88>
    8c34:	00ffffc4 	movi	r3,-1
    8c38:	003ff306 	br	8c08 <__sfvwrite_small_dev+0x88>

00008c3c <putc>:
    8c3c:	defffd04 	addi	sp,sp,-12
    8c40:	00800074 	movhi	r2,1
    8c44:	10aa2304 	addi	r2,r2,-22388
    8c48:	dc000115 	stw	r16,4(sp)
    8c4c:	2021883a 	mov	r16,r4
    8c50:	11000017 	ldw	r4,0(r2)
    8c54:	dc000005 	stb	r16,0(sp)
    8c58:	00800074 	movhi	r2,1
    8c5c:	10a2e004 	addi	r2,r2,-29824
    8c60:	dfc00215 	stw	ra,8(sp)
    8c64:	28800115 	stw	r2,4(r5)
    8c68:	d80d883a 	mov	r6,sp
    8c6c:	01c00044 	movi	r7,1
    8c70:	103ee83a 	callr	r2
    8c74:	1007883a 	mov	r3,r2
    8c78:	00bfffc4 	movi	r2,-1
    8c7c:	18800526 	beq	r3,r2,8c94 <putc+0x58>
    8c80:	8005883a 	mov	r2,r16
    8c84:	dfc00217 	ldw	ra,8(sp)
    8c88:	dc000117 	ldw	r16,4(sp)
    8c8c:	dec00304 	addi	sp,sp,12
    8c90:	f800283a 	ret
    8c94:	1821883a 	mov	r16,r3
    8c98:	8005883a 	mov	r2,r16
    8c9c:	dfc00217 	ldw	ra,8(sp)
    8ca0:	dc000117 	ldw	r16,4(sp)
    8ca4:	dec00304 	addi	sp,sp,12
    8ca8:	f800283a 	ret

00008cac <_putc_r>:
    8cac:	00800074 	movhi	r2,1
    8cb0:	10aa2304 	addi	r2,r2,-22388
    8cb4:	defffd04 	addi	sp,sp,-12
    8cb8:	11000017 	ldw	r4,0(r2)
    8cbc:	00800074 	movhi	r2,1
    8cc0:	10a2e004 	addi	r2,r2,-29824
    8cc4:	30800115 	stw	r2,4(r6)
    8cc8:	dc000115 	stw	r16,4(sp)
    8ccc:	2821883a 	mov	r16,r5
    8cd0:	dfc00215 	stw	ra,8(sp)
    8cd4:	300b883a 	mov	r5,r6
    8cd8:	01c00044 	movi	r7,1
    8cdc:	d80d883a 	mov	r6,sp
    8ce0:	dc000005 	stb	r16,0(sp)
    8ce4:	103ee83a 	callr	r2
    8ce8:	1007883a 	mov	r3,r2
    8cec:	00bfffc4 	movi	r2,-1
    8cf0:	18800526 	beq	r3,r2,8d08 <_putc_r+0x5c>
    8cf4:	8005883a 	mov	r2,r16
    8cf8:	dfc00217 	ldw	ra,8(sp)
    8cfc:	dc000117 	ldw	r16,4(sp)
    8d00:	dec00304 	addi	sp,sp,12
    8d04:	f800283a 	ret
    8d08:	1821883a 	mov	r16,r3
    8d0c:	8005883a 	mov	r2,r16
    8d10:	dfc00217 	ldw	ra,8(sp)
    8d14:	dc000117 	ldw	r16,4(sp)
    8d18:	dec00304 	addi	sp,sp,12
    8d1c:	f800283a 	ret

00008d20 <_write_r>:
    8d20:	defffd04 	addi	sp,sp,-12
    8d24:	dc000015 	stw	r16,0(sp)
    8d28:	04000074 	movhi	r16,1
    8d2c:	842ae004 	addi	r16,r16,-21632
    8d30:	dc400115 	stw	r17,4(sp)
    8d34:	80000015 	stw	zero,0(r16)
    8d38:	2023883a 	mov	r17,r4
    8d3c:	2809883a 	mov	r4,r5
    8d40:	300b883a 	mov	r5,r6
    8d44:	380d883a 	mov	r6,r7
    8d48:	dfc00215 	stw	ra,8(sp)
    8d4c:	00090740 	call	9074 <write>
    8d50:	1007883a 	mov	r3,r2
    8d54:	00bfffc4 	movi	r2,-1
    8d58:	18800626 	beq	r3,r2,8d74 <_write_r+0x54>
    8d5c:	1805883a 	mov	r2,r3
    8d60:	dfc00217 	ldw	ra,8(sp)
    8d64:	dc400117 	ldw	r17,4(sp)
    8d68:	dc000017 	ldw	r16,0(sp)
    8d6c:	dec00304 	addi	sp,sp,12
    8d70:	f800283a 	ret
    8d74:	80800017 	ldw	r2,0(r16)
    8d78:	103ff826 	beq	r2,zero,8d5c <_write_r+0x3c>
    8d7c:	88800015 	stw	r2,0(r17)
    8d80:	1805883a 	mov	r2,r3
    8d84:	dfc00217 	ldw	ra,8(sp)
    8d88:	dc400117 	ldw	r17,4(sp)
    8d8c:	dc000017 	ldw	r16,0(sp)
    8d90:	dec00304 	addi	sp,sp,12
    8d94:	f800283a 	ret

00008d98 <udivmodsi4>:
    8d98:	29001b2e 	bgeu	r5,r4,8e08 <udivmodsi4+0x70>
    8d9c:	28001a16 	blt	r5,zero,8e08 <udivmodsi4+0x70>
    8da0:	00800044 	movi	r2,1
    8da4:	0007883a 	mov	r3,zero
    8da8:	01c007c4 	movi	r7,31
    8dac:	00000306 	br	8dbc <udivmodsi4+0x24>
    8db0:	19c01326 	beq	r3,r7,8e00 <udivmodsi4+0x68>
    8db4:	18c00044 	addi	r3,r3,1
    8db8:	28000416 	blt	r5,zero,8dcc <udivmodsi4+0x34>
    8dbc:	294b883a 	add	r5,r5,r5
    8dc0:	1085883a 	add	r2,r2,r2
    8dc4:	293ffa36 	bltu	r5,r4,8db0 <udivmodsi4+0x18>
    8dc8:	10000d26 	beq	r2,zero,8e00 <udivmodsi4+0x68>
    8dcc:	0007883a 	mov	r3,zero
    8dd0:	21400236 	bltu	r4,r5,8ddc <udivmodsi4+0x44>
    8dd4:	2149c83a 	sub	r4,r4,r5
    8dd8:	1886b03a 	or	r3,r3,r2
    8ddc:	1004d07a 	srli	r2,r2,1
    8de0:	280ad07a 	srli	r5,r5,1
    8de4:	103ffa1e 	bne	r2,zero,8dd0 <udivmodsi4+0x38>
    8de8:	30000226 	beq	r6,zero,8df4 <udivmodsi4+0x5c>
    8dec:	2005883a 	mov	r2,r4
    8df0:	f800283a 	ret
    8df4:	1809883a 	mov	r4,r3
    8df8:	2005883a 	mov	r2,r4
    8dfc:	f800283a 	ret
    8e00:	0007883a 	mov	r3,zero
    8e04:	003ff806 	br	8de8 <udivmodsi4+0x50>
    8e08:	00800044 	movi	r2,1
    8e0c:	0007883a 	mov	r3,zero
    8e10:	003fef06 	br	8dd0 <udivmodsi4+0x38>

00008e14 <__divsi3>:
    8e14:	defffe04 	addi	sp,sp,-8
    8e18:	dc000015 	stw	r16,0(sp)
    8e1c:	dfc00115 	stw	ra,4(sp)
    8e20:	0021883a 	mov	r16,zero
    8e24:	20000c16 	blt	r4,zero,8e58 <__divsi3+0x44>
    8e28:	000d883a 	mov	r6,zero
    8e2c:	28000e16 	blt	r5,zero,8e68 <__divsi3+0x54>
    8e30:	0008d980 	call	8d98 <udivmodsi4>
    8e34:	1007883a 	mov	r3,r2
    8e38:	8005003a 	cmpeq	r2,r16,zero
    8e3c:	1000011e 	bne	r2,zero,8e44 <__divsi3+0x30>
    8e40:	00c7c83a 	sub	r3,zero,r3
    8e44:	1805883a 	mov	r2,r3
    8e48:	dfc00117 	ldw	ra,4(sp)
    8e4c:	dc000017 	ldw	r16,0(sp)
    8e50:	dec00204 	addi	sp,sp,8
    8e54:	f800283a 	ret
    8e58:	0109c83a 	sub	r4,zero,r4
    8e5c:	04000044 	movi	r16,1
    8e60:	000d883a 	mov	r6,zero
    8e64:	283ff20e 	bge	r5,zero,8e30 <__divsi3+0x1c>
    8e68:	014bc83a 	sub	r5,zero,r5
    8e6c:	8021003a 	cmpeq	r16,r16,zero
    8e70:	003fef06 	br	8e30 <__divsi3+0x1c>

00008e74 <__modsi3>:
    8e74:	deffff04 	addi	sp,sp,-4
    8e78:	dfc00015 	stw	ra,0(sp)
    8e7c:	01800044 	movi	r6,1
    8e80:	2807883a 	mov	r3,r5
    8e84:	20000416 	blt	r4,zero,8e98 <__modsi3+0x24>
    8e88:	28000c16 	blt	r5,zero,8ebc <__modsi3+0x48>
    8e8c:	dfc00017 	ldw	ra,0(sp)
    8e90:	dec00104 	addi	sp,sp,4
    8e94:	0008d981 	jmpi	8d98 <udivmodsi4>
    8e98:	0109c83a 	sub	r4,zero,r4
    8e9c:	28000b16 	blt	r5,zero,8ecc <__modsi3+0x58>
    8ea0:	180b883a 	mov	r5,r3
    8ea4:	01800044 	movi	r6,1
    8ea8:	0008d980 	call	8d98 <udivmodsi4>
    8eac:	0085c83a 	sub	r2,zero,r2
    8eb0:	dfc00017 	ldw	ra,0(sp)
    8eb4:	dec00104 	addi	sp,sp,4
    8eb8:	f800283a 	ret
    8ebc:	014bc83a 	sub	r5,zero,r5
    8ec0:	dfc00017 	ldw	ra,0(sp)
    8ec4:	dec00104 	addi	sp,sp,4
    8ec8:	0008d981 	jmpi	8d98 <udivmodsi4>
    8ecc:	0147c83a 	sub	r3,zero,r5
    8ed0:	003ff306 	br	8ea0 <__modsi3+0x2c>

00008ed4 <__udivsi3>:
    8ed4:	000d883a 	mov	r6,zero
    8ed8:	0008d981 	jmpi	8d98 <udivmodsi4>

00008edc <__umodsi3>:
    8edc:	01800044 	movi	r6,1
    8ee0:	0008d981 	jmpi	8d98 <udivmodsi4>

00008ee4 <__mulsi3>:
    8ee4:	20000a26 	beq	r4,zero,8f10 <__mulsi3+0x2c>
    8ee8:	0007883a 	mov	r3,zero
    8eec:	2080004c 	andi	r2,r4,1
    8ef0:	1005003a 	cmpeq	r2,r2,zero
    8ef4:	2008d07a 	srli	r4,r4,1
    8ef8:	1000011e 	bne	r2,zero,8f00 <__mulsi3+0x1c>
    8efc:	1947883a 	add	r3,r3,r5
    8f00:	294b883a 	add	r5,r5,r5
    8f04:	203ff91e 	bne	r4,zero,8eec <__mulsi3+0x8>
    8f08:	1805883a 	mov	r2,r3
    8f0c:	f800283a 	ret
    8f10:	0007883a 	mov	r3,zero
    8f14:	1805883a 	mov	r2,r3
    8f18:	f800283a 	ret

00008f1c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8f1c:	defffe04 	addi	sp,sp,-8
    8f20:	dfc00115 	stw	ra,4(sp)
    8f24:	df000015 	stw	fp,0(sp)
    8f28:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    8f2c:	01000074 	movhi	r4,1
    8f30:	212a2b04 	addi	r4,r4,-22356
    8f34:	01400074 	movhi	r5,1
    8f38:	29697604 	addi	r5,r5,-23080
    8f3c:	01800074 	movhi	r6,1
    8f40:	31aa2b04 	addi	r6,r6,-22356
    8f44:	0008f9c0 	call	8f9c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    8f48:	01000074 	movhi	r4,1
    8f4c:	21200804 	addi	r4,r4,-32736
    8f50:	01400074 	movhi	r5,1
    8f54:	29600804 	addi	r5,r5,-32736
    8f58:	01800074 	movhi	r6,1
    8f5c:	31a00804 	addi	r6,r6,-32736
    8f60:	0008f9c0 	call	8f9c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    8f64:	01000074 	movhi	r4,1
    8f68:	2128f704 	addi	r4,r4,-23588
    8f6c:	01400074 	movhi	r5,1
    8f70:	2968f704 	addi	r5,r5,-23588
    8f74:	01800074 	movhi	r6,1
    8f78:	31a97604 	addi	r6,r6,-23080
    8f7c:	0008f9c0 	call	8f9c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8f80:	000964c0 	call	964c <alt_dcache_flush_all>
  alt_icache_flush_all();
    8f84:	00098700 	call	9870 <alt_icache_flush_all>
}
    8f88:	e037883a 	mov	sp,fp
    8f8c:	dfc00117 	ldw	ra,4(sp)
    8f90:	df000017 	ldw	fp,0(sp)
    8f94:	dec00204 	addi	sp,sp,8
    8f98:	f800283a 	ret

00008f9c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    8f9c:	defffc04 	addi	sp,sp,-16
    8fa0:	df000315 	stw	fp,12(sp)
    8fa4:	df000304 	addi	fp,sp,12
    8fa8:	e13ffd15 	stw	r4,-12(fp)
    8fac:	e17ffe15 	stw	r5,-8(fp)
    8fb0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    8fb4:	e0fffe17 	ldw	r3,-8(fp)
    8fb8:	e0bffd17 	ldw	r2,-12(fp)
    8fbc:	18800e26 	beq	r3,r2,8ff8 <alt_load_section+0x5c>
  {
    while( to != end )
    8fc0:	00000a06 	br	8fec <alt_load_section+0x50>
    {
      *to++ = *from++;
    8fc4:	e0bffd17 	ldw	r2,-12(fp)
    8fc8:	10c00017 	ldw	r3,0(r2)
    8fcc:	e0bffe17 	ldw	r2,-8(fp)
    8fd0:	10c00015 	stw	r3,0(r2)
    8fd4:	e0bffe17 	ldw	r2,-8(fp)
    8fd8:	10800104 	addi	r2,r2,4
    8fdc:	e0bffe15 	stw	r2,-8(fp)
    8fe0:	e0bffd17 	ldw	r2,-12(fp)
    8fe4:	10800104 	addi	r2,r2,4
    8fe8:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8fec:	e0fffe17 	ldw	r3,-8(fp)
    8ff0:	e0bfff17 	ldw	r2,-4(fp)
    8ff4:	18bff31e 	bne	r3,r2,8fc4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    8ff8:	e037883a 	mov	sp,fp
    8ffc:	df000017 	ldw	fp,0(sp)
    9000:	dec00104 	addi	sp,sp,4
    9004:	f800283a 	ret

00009008 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    9008:	defffd04 	addi	sp,sp,-12
    900c:	dfc00215 	stw	ra,8(sp)
    9010:	df000115 	stw	fp,4(sp)
    9014:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    9018:	0009883a 	mov	r4,zero
    901c:	00091f80 	call	91f8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    9020:	000922c0 	call	922c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    9024:	01000074 	movhi	r4,1
    9028:	21296904 	addi	r4,r4,-23132
    902c:	01400074 	movhi	r5,1
    9030:	29696904 	addi	r5,r5,-23132
    9034:	01800074 	movhi	r6,1
    9038:	31a96904 	addi	r6,r6,-23132
    903c:	00099640 	call	9964 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    9040:	00097a80 	call	97a8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    9044:	01000074 	movhi	r4,1
    9048:	21260304 	addi	r4,r4,-26612
    904c:	0009fdc0 	call	9fdc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    9050:	d120be17 	ldw	r4,-32008(gp)
    9054:	d160bf17 	ldw	r5,-32004(gp)
    9058:	d1a0c017 	ldw	r6,-32000(gp)
    905c:	00081e80 	call	81e8 <main>
    9060:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    9064:	01000044 	movi	r4,1
    9068:	00094ec0 	call	94ec <close>
  exit (result);
    906c:	e13fff17 	ldw	r4,-4(fp)
    9070:	0009ff00 	call	9ff0 <exit>

00009074 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    9074:	defff704 	addi	sp,sp,-36
    9078:	dfc00815 	stw	ra,32(sp)
    907c:	df000715 	stw	fp,28(sp)
    9080:	df000704 	addi	fp,sp,28
    9084:	e13ffb15 	stw	r4,-20(fp)
    9088:	e17ffc15 	stw	r5,-16(fp)
    908c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9090:	e0bffb17 	ldw	r2,-20(fp)
    9094:	1004803a 	cmplt	r2,r2,zero
    9098:	1000091e 	bne	r2,zero,90c0 <write+0x4c>
    909c:	e13ffb17 	ldw	r4,-20(fp)
    90a0:	01400304 	movi	r5,12
    90a4:	0008ee40 	call	8ee4 <__mulsi3>
    90a8:	1007883a 	mov	r3,r2
    90ac:	00800074 	movhi	r2,1
    90b0:	10a9c304 	addi	r2,r2,-22772
    90b4:	1887883a 	add	r3,r3,r2
    90b8:	e0ffff15 	stw	r3,-4(fp)
    90bc:	00000106 	br	90c4 <write+0x50>
    90c0:	e03fff15 	stw	zero,-4(fp)
    90c4:	e0bfff17 	ldw	r2,-4(fp)
    90c8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    90cc:	e0bffa17 	ldw	r2,-24(fp)
    90d0:	1005003a 	cmpeq	r2,r2,zero
    90d4:	1000241e 	bne	r2,zero,9168 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    90d8:	e0bffa17 	ldw	r2,-24(fp)
    90dc:	10800217 	ldw	r2,8(r2)
    90e0:	108000cc 	andi	r2,r2,3
    90e4:	1005003a 	cmpeq	r2,r2,zero
    90e8:	10001a1e 	bne	r2,zero,9154 <write+0xe0>
    90ec:	e0bffa17 	ldw	r2,-24(fp)
    90f0:	10800017 	ldw	r2,0(r2)
    90f4:	10800617 	ldw	r2,24(r2)
    90f8:	1005003a 	cmpeq	r2,r2,zero
    90fc:	1000151e 	bne	r2,zero,9154 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    9100:	e0bffa17 	ldw	r2,-24(fp)
    9104:	10800017 	ldw	r2,0(r2)
    9108:	10800617 	ldw	r2,24(r2)
    910c:	e17ffc17 	ldw	r5,-16(fp)
    9110:	e1bffd17 	ldw	r6,-12(fp)
    9114:	e13ffa17 	ldw	r4,-24(fp)
    9118:	103ee83a 	callr	r2
    911c:	e0bff915 	stw	r2,-28(fp)
    9120:	e0bff917 	ldw	r2,-28(fp)
    9124:	1004403a 	cmpge	r2,r2,zero
    9128:	1000071e 	bne	r2,zero,9148 <write+0xd4>
      {
        ALT_ERRNO = -rval;
    912c:	00091980 	call	9198 <alt_get_errno>
    9130:	e0fff917 	ldw	r3,-28(fp)
    9134:	00c7c83a 	sub	r3,zero,r3
    9138:	10c00015 	stw	r3,0(r2)
        return -1;
    913c:	00bfffc4 	movi	r2,-1
    9140:	e0bffe15 	stw	r2,-8(fp)
    9144:	00000e06 	br	9180 <write+0x10c>
      }
      return rval;
    9148:	e0bff917 	ldw	r2,-28(fp)
    914c:	e0bffe15 	stw	r2,-8(fp)
    9150:	00000b06 	br	9180 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
    9154:	00091980 	call	9198 <alt_get_errno>
    9158:	1007883a 	mov	r3,r2
    915c:	00800344 	movi	r2,13
    9160:	18800015 	stw	r2,0(r3)
    9164:	00000406 	br	9178 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    9168:	00091980 	call	9198 <alt_get_errno>
    916c:	1007883a 	mov	r3,r2
    9170:	00801444 	movi	r2,81
    9174:	18800015 	stw	r2,0(r3)
  }
  return -1;
    9178:	00bfffc4 	movi	r2,-1
    917c:	e0bffe15 	stw	r2,-8(fp)
    9180:	e0bffe17 	ldw	r2,-8(fp)
}
    9184:	e037883a 	mov	sp,fp
    9188:	dfc00117 	ldw	ra,4(sp)
    918c:	df000017 	ldw	fp,0(sp)
    9190:	dec00204 	addi	sp,sp,8
    9194:	f800283a 	ret

00009198 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9198:	defffd04 	addi	sp,sp,-12
    919c:	dfc00215 	stw	ra,8(sp)
    91a0:	df000115 	stw	fp,4(sp)
    91a4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    91a8:	00800074 	movhi	r2,1
    91ac:	10aa2a04 	addi	r2,r2,-22360
    91b0:	10800017 	ldw	r2,0(r2)
    91b4:	1005003a 	cmpeq	r2,r2,zero
    91b8:	1000061e 	bne	r2,zero,91d4 <alt_get_errno+0x3c>
    91bc:	00800074 	movhi	r2,1
    91c0:	10aa2a04 	addi	r2,r2,-22360
    91c4:	10800017 	ldw	r2,0(r2)
    91c8:	103ee83a 	callr	r2
    91cc:	e0bfff15 	stw	r2,-4(fp)
    91d0:	00000306 	br	91e0 <alt_get_errno+0x48>
    91d4:	00800074 	movhi	r2,1
    91d8:	10aae004 	addi	r2,r2,-21632
    91dc:	e0bfff15 	stw	r2,-4(fp)
    91e0:	e0bfff17 	ldw	r2,-4(fp)
}
    91e4:	e037883a 	mov	sp,fp
    91e8:	dfc00117 	ldw	ra,4(sp)
    91ec:	df000017 	ldw	fp,0(sp)
    91f0:	dec00204 	addi	sp,sp,8
    91f4:	f800283a 	ret

000091f8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    91f8:	defffd04 	addi	sp,sp,-12
    91fc:	dfc00215 	stw	ra,8(sp)
    9200:	df000115 	stw	fp,4(sp)
    9204:	df000104 	addi	fp,sp,4
    9208:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    920c:	0009d380 	call	9d38 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    9210:	00800044 	movi	r2,1
    9214:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    9218:	e037883a 	mov	sp,fp
    921c:	dfc00117 	ldw	ra,4(sp)
    9220:	df000017 	ldw	fp,0(sp)
    9224:	dec00204 	addi	sp,sp,8
    9228:	f800283a 	ret

0000922c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    922c:	defffe04 	addi	sp,sp,-8
    9230:	dfc00115 	stw	ra,4(sp)
    9234:	df000015 	stw	fp,0(sp)
    9238:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    923c:	01000074 	movhi	r4,1
    9240:	2129ae04 	addi	r4,r4,-22856
    9244:	000925c0 	call	925c <alt_dev_reg>
}
    9248:	e037883a 	mov	sp,fp
    924c:	dfc00117 	ldw	ra,4(sp)
    9250:	df000017 	ldw	fp,0(sp)
    9254:	dec00204 	addi	sp,sp,8
    9258:	f800283a 	ret

0000925c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    925c:	defffd04 	addi	sp,sp,-12
    9260:	dfc00215 	stw	ra,8(sp)
    9264:	df000115 	stw	fp,4(sp)
    9268:	df000104 	addi	fp,sp,4
    926c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    9270:	e13fff17 	ldw	r4,-4(fp)
    9274:	01400074 	movhi	r5,1
    9278:	296a2704 	addi	r5,r5,-22372
    927c:	00096940 	call	9694 <alt_dev_llist_insert>
}
    9280:	e037883a 	mov	sp,fp
    9284:	dfc00117 	ldw	ra,4(sp)
    9288:	df000017 	ldw	fp,0(sp)
    928c:	dec00204 	addi	sp,sp,8
    9290:	f800283a 	ret

00009294 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    9294:	defffa04 	addi	sp,sp,-24
    9298:	dfc00515 	stw	ra,20(sp)
    929c:	df000415 	stw	fp,16(sp)
    92a0:	df000404 	addi	fp,sp,16
    92a4:	e13ffd15 	stw	r4,-12(fp)
    92a8:	e17ffe15 	stw	r5,-8(fp)
    92ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    92b0:	e0bffd17 	ldw	r2,-12(fp)
    92b4:	10800017 	ldw	r2,0(r2)
    92b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    92bc:	e0bffc17 	ldw	r2,-16(fp)
    92c0:	11000a04 	addi	r4,r2,40
    92c4:	e0bffd17 	ldw	r2,-12(fp)
    92c8:	11c00217 	ldw	r7,8(r2)
    92cc:	e17ffe17 	ldw	r5,-8(fp)
    92d0:	e1bfff17 	ldw	r6,-4(fp)
    92d4:	00093440 	call	9344 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    92d8:	e037883a 	mov	sp,fp
    92dc:	dfc00117 	ldw	ra,4(sp)
    92e0:	df000017 	ldw	fp,0(sp)
    92e4:	dec00204 	addi	sp,sp,8
    92e8:	f800283a 	ret

000092ec <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    92ec:	defffa04 	addi	sp,sp,-24
    92f0:	dfc00515 	stw	ra,20(sp)
    92f4:	df000415 	stw	fp,16(sp)
    92f8:	df000404 	addi	fp,sp,16
    92fc:	e13ffd15 	stw	r4,-12(fp)
    9300:	e17ffe15 	stw	r5,-8(fp)
    9304:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9308:	e0bffd17 	ldw	r2,-12(fp)
    930c:	10800017 	ldw	r2,0(r2)
    9310:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    9314:	e0bffc17 	ldw	r2,-16(fp)
    9318:	11000a04 	addi	r4,r2,40
    931c:	e0bffd17 	ldw	r2,-12(fp)
    9320:	11c00217 	ldw	r7,8(r2)
    9324:	e17ffe17 	ldw	r5,-8(fp)
    9328:	e1bfff17 	ldw	r6,-4(fp)
    932c:	00094480 	call	9448 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    9330:	e037883a 	mov	sp,fp
    9334:	dfc00117 	ldw	ra,4(sp)
    9338:	df000017 	ldw	fp,0(sp)
    933c:	dec00204 	addi	sp,sp,8
    9340:	f800283a 	ret

00009344 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    9344:	defff604 	addi	sp,sp,-40
    9348:	df000915 	stw	fp,36(sp)
    934c:	df000904 	addi	fp,sp,36
    9350:	e13ffb15 	stw	r4,-20(fp)
    9354:	e17ffc15 	stw	r5,-16(fp)
    9358:	e1bffd15 	stw	r6,-12(fp)
    935c:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
    9360:	e0bffb17 	ldw	r2,-20(fp)
    9364:	10800017 	ldw	r2,0(r2)
    9368:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
    936c:	e0bffc17 	ldw	r2,-16(fp)
    9370:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
    9374:	e0bffd17 	ldw	r2,-12(fp)
    9378:	1007883a 	mov	r3,r2
    937c:	e0bffc17 	ldw	r2,-16(fp)
    9380:	10c5883a 	add	r2,r2,r3
    9384:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
    9388:	00001606 	br	93e4 <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    938c:	e0bffa17 	ldw	r2,-24(fp)
    9390:	10800037 	ldwio	r2,0(r2)
    9394:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    9398:	e0bff717 	ldw	r2,-36(fp)
    939c:	10a0000c 	andi	r2,r2,32768
    93a0:	1005003a 	cmpeq	r2,r2,zero
    93a4:	1000081e 	bne	r2,zero,93c8 <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    93a8:	e0bff717 	ldw	r2,-36(fp)
    93ac:	1007883a 	mov	r3,r2
    93b0:	e0bff917 	ldw	r2,-28(fp)
    93b4:	10c00005 	stb	r3,0(r2)
    93b8:	e0bff917 	ldw	r2,-28(fp)
    93bc:	10800044 	addi	r2,r2,1
    93c0:	e0bff915 	stw	r2,-28(fp)
    93c4:	00000706 	br	93e4 <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
    93c8:	e0fff917 	ldw	r3,-28(fp)
    93cc:	e0bffc17 	ldw	r2,-16(fp)
    93d0:	1880071e 	bne	r3,r2,93f0 <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
    93d4:	e0bffe17 	ldw	r2,-8(fp)
    93d8:	1090000c 	andi	r2,r2,16384
    93dc:	1004c03a 	cmpne	r2,r2,zero
    93e0:	1000031e 	bne	r2,zero,93f0 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    93e4:	e0fff917 	ldw	r3,-28(fp)
    93e8:	e0bff817 	ldw	r2,-32(fp)
    93ec:	18bfe736 	bltu	r3,r2,938c <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
    93f0:	e0fff917 	ldw	r3,-28(fp)
    93f4:	e0bffc17 	ldw	r2,-16(fp)
    93f8:	18800526 	beq	r3,r2,9410 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
    93fc:	e0fff917 	ldw	r3,-28(fp)
    9400:	e0bffc17 	ldw	r2,-16(fp)
    9404:	1887c83a 	sub	r3,r3,r2
    9408:	e0ffff15 	stw	r3,-4(fp)
    940c:	00000906 	br	9434 <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
    9410:	e0bffe17 	ldw	r2,-8(fp)
    9414:	1090000c 	andi	r2,r2,16384
    9418:	1005003a 	cmpeq	r2,r2,zero
    941c:	1000031e 	bne	r2,zero,942c <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
    9420:	00bffd44 	movi	r2,-11
    9424:	e0bfff15 	stw	r2,-4(fp)
    9428:	00000206 	br	9434 <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
    942c:	00bffec4 	movi	r2,-5
    9430:	e0bfff15 	stw	r2,-4(fp)
    9434:	e0bfff17 	ldw	r2,-4(fp)
}
    9438:	e037883a 	mov	sp,fp
    943c:	df000017 	ldw	fp,0(sp)
    9440:	dec00104 	addi	sp,sp,4
    9444:	f800283a 	ret

00009448 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    9448:	defff904 	addi	sp,sp,-28
    944c:	df000615 	stw	fp,24(sp)
    9450:	df000604 	addi	fp,sp,24
    9454:	e13ffc15 	stw	r4,-16(fp)
    9458:	e17ffd15 	stw	r5,-12(fp)
    945c:	e1bffe15 	stw	r6,-8(fp)
    9460:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    9464:	e0bffc17 	ldw	r2,-16(fp)
    9468:	10800017 	ldw	r2,0(r2)
    946c:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
    9470:	e0bffe17 	ldw	r2,-8(fp)
    9474:	1007883a 	mov	r3,r2
    9478:	e0bffd17 	ldw	r2,-12(fp)
    947c:	10c5883a 	add	r2,r2,r3
    9480:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    9484:	00001106 	br	94cc <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    9488:	e0bffb17 	ldw	r2,-20(fp)
    948c:	10800104 	addi	r2,r2,4
    9490:	10800037 	ldwio	r2,0(r2)
    9494:	10bfffec 	andhi	r2,r2,65535
    9498:	1005003a 	cmpeq	r2,r2,zero
    949c:	10000b1e 	bne	r2,zero,94cc <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    94a0:	e13ffb17 	ldw	r4,-20(fp)
    94a4:	e0bffd17 	ldw	r2,-12(fp)
    94a8:	10800003 	ldbu	r2,0(r2)
    94ac:	10c03fcc 	andi	r3,r2,255
    94b0:	18c0201c 	xori	r3,r3,128
    94b4:	18ffe004 	addi	r3,r3,-128
    94b8:	e0bffd17 	ldw	r2,-12(fp)
    94bc:	10800044 	addi	r2,r2,1
    94c0:	e0bffd15 	stw	r2,-12(fp)
    94c4:	2005883a 	mov	r2,r4
    94c8:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    94cc:	e0fffd17 	ldw	r3,-12(fp)
    94d0:	e0bffa17 	ldw	r2,-24(fp)
    94d4:	18bfec36 	bltu	r3,r2,9488 <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    94d8:	e0bffe17 	ldw	r2,-8(fp)
}
    94dc:	e037883a 	mov	sp,fp
    94e0:	df000017 	ldw	fp,0(sp)
    94e4:	dec00104 	addi	sp,sp,4
    94e8:	f800283a 	ret

000094ec <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    94ec:	defff804 	addi	sp,sp,-32
    94f0:	dfc00715 	stw	ra,28(sp)
    94f4:	df000615 	stw	fp,24(sp)
    94f8:	df000604 	addi	fp,sp,24
    94fc:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    9500:	e0bffc17 	ldw	r2,-16(fp)
    9504:	1004803a 	cmplt	r2,r2,zero
    9508:	1000091e 	bne	r2,zero,9530 <close+0x44>
    950c:	e13ffc17 	ldw	r4,-16(fp)
    9510:	01400304 	movi	r5,12
    9514:	0008ee40 	call	8ee4 <__mulsi3>
    9518:	1007883a 	mov	r3,r2
    951c:	00800074 	movhi	r2,1
    9520:	10a9c304 	addi	r2,r2,-22772
    9524:	1887883a 	add	r3,r3,r2
    9528:	e0ffff15 	stw	r3,-4(fp)
    952c:	00000106 	br	9534 <close+0x48>
    9530:	e03fff15 	stw	zero,-4(fp)
    9534:	e0bfff17 	ldw	r2,-4(fp)
    9538:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    953c:	e0bffb17 	ldw	r2,-20(fp)
    9540:	1005003a 	cmpeq	r2,r2,zero
    9544:	10001d1e 	bne	r2,zero,95bc <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9548:	e0bffb17 	ldw	r2,-20(fp)
    954c:	10800017 	ldw	r2,0(r2)
    9550:	10800417 	ldw	r2,16(r2)
    9554:	1005003a 	cmpeq	r2,r2,zero
    9558:	1000071e 	bne	r2,zero,9578 <close+0x8c>
    955c:	e0bffb17 	ldw	r2,-20(fp)
    9560:	10800017 	ldw	r2,0(r2)
    9564:	10800417 	ldw	r2,16(r2)
    9568:	e13ffb17 	ldw	r4,-20(fp)
    956c:	103ee83a 	callr	r2
    9570:	e0bffe15 	stw	r2,-8(fp)
    9574:	00000106 	br	957c <close+0x90>
    9578:	e03ffe15 	stw	zero,-8(fp)
    957c:	e0bffe17 	ldw	r2,-8(fp)
    9580:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    9584:	e13ffc17 	ldw	r4,-16(fp)
    9588:	0009cc00 	call	9cc0 <alt_release_fd>
    if (rval < 0)
    958c:	e0bffa17 	ldw	r2,-24(fp)
    9590:	1004403a 	cmpge	r2,r2,zero
    9594:	1000071e 	bne	r2,zero,95b4 <close+0xc8>
    {
      ALT_ERRNO = -rval;
    9598:	00095ec0 	call	95ec <alt_get_errno>
    959c:	e0fffa17 	ldw	r3,-24(fp)
    95a0:	00c7c83a 	sub	r3,zero,r3
    95a4:	10c00015 	stw	r3,0(r2)
      return -1;
    95a8:	00bfffc4 	movi	r2,-1
    95ac:	e0bffd15 	stw	r2,-12(fp)
    95b0:	00000806 	br	95d4 <close+0xe8>
    }
    return 0;
    95b4:	e03ffd15 	stw	zero,-12(fp)
    95b8:	00000606 	br	95d4 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    95bc:	00095ec0 	call	95ec <alt_get_errno>
    95c0:	1007883a 	mov	r3,r2
    95c4:	00801444 	movi	r2,81
    95c8:	18800015 	stw	r2,0(r3)
    return -1;
    95cc:	00bfffc4 	movi	r2,-1
    95d0:	e0bffd15 	stw	r2,-12(fp)
    95d4:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    95d8:	e037883a 	mov	sp,fp
    95dc:	dfc00117 	ldw	ra,4(sp)
    95e0:	df000017 	ldw	fp,0(sp)
    95e4:	dec00204 	addi	sp,sp,8
    95e8:	f800283a 	ret

000095ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    95ec:	defffd04 	addi	sp,sp,-12
    95f0:	dfc00215 	stw	ra,8(sp)
    95f4:	df000115 	stw	fp,4(sp)
    95f8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    95fc:	00800074 	movhi	r2,1
    9600:	10aa2a04 	addi	r2,r2,-22360
    9604:	10800017 	ldw	r2,0(r2)
    9608:	1005003a 	cmpeq	r2,r2,zero
    960c:	1000061e 	bne	r2,zero,9628 <alt_get_errno+0x3c>
    9610:	00800074 	movhi	r2,1
    9614:	10aa2a04 	addi	r2,r2,-22360
    9618:	10800017 	ldw	r2,0(r2)
    961c:	103ee83a 	callr	r2
    9620:	e0bfff15 	stw	r2,-4(fp)
    9624:	00000306 	br	9634 <alt_get_errno+0x48>
    9628:	00800074 	movhi	r2,1
    962c:	10aae004 	addi	r2,r2,-21632
    9630:	e0bfff15 	stw	r2,-4(fp)
    9634:	e0bfff17 	ldw	r2,-4(fp)
}
    9638:	e037883a 	mov	sp,fp
    963c:	dfc00117 	ldw	ra,4(sp)
    9640:	df000017 	ldw	fp,0(sp)
    9644:	dec00204 	addi	sp,sp,8
    9648:	f800283a 	ret

0000964c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    964c:	deffff04 	addi	sp,sp,-4
    9650:	df000015 	stw	fp,0(sp)
    9654:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    9658:	e037883a 	mov	sp,fp
    965c:	df000017 	ldw	fp,0(sp)
    9660:	dec00104 	addi	sp,sp,4
    9664:	f800283a 	ret

00009668 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9668:	defffc04 	addi	sp,sp,-16
    966c:	df000315 	stw	fp,12(sp)
    9670:	df000304 	addi	fp,sp,12
    9674:	e13ffd15 	stw	r4,-12(fp)
    9678:	e17ffe15 	stw	r5,-8(fp)
    967c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    9680:	e0bfff17 	ldw	r2,-4(fp)
}
    9684:	e037883a 	mov	sp,fp
    9688:	df000017 	ldw	fp,0(sp)
    968c:	dec00104 	addi	sp,sp,4
    9690:	f800283a 	ret

00009694 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    9694:	defff904 	addi	sp,sp,-28
    9698:	dfc00615 	stw	ra,24(sp)
    969c:	df000515 	stw	fp,20(sp)
    96a0:	df000504 	addi	fp,sp,20
    96a4:	e13ffd15 	stw	r4,-12(fp)
    96a8:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    96ac:	e0bffd17 	ldw	r2,-12(fp)
    96b0:	1005003a 	cmpeq	r2,r2,zero
    96b4:	1000041e 	bne	r2,zero,96c8 <alt_dev_llist_insert+0x34>
    96b8:	e0bffd17 	ldw	r2,-12(fp)
    96bc:	10800217 	ldw	r2,8(r2)
    96c0:	1004c03a 	cmpne	r2,r2,zero
    96c4:	1000071e 	bne	r2,zero,96e4 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    96c8:	00097480 	call	9748 <alt_get_errno>
    96cc:	1007883a 	mov	r3,r2
    96d0:	00800584 	movi	r2,22
    96d4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    96d8:	00bffa84 	movi	r2,-22
    96dc:	e0bfff15 	stw	r2,-4(fp)
    96e0:	00001306 	br	9730 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    96e4:	e0fffd17 	ldw	r3,-12(fp)
    96e8:	e0bffe17 	ldw	r2,-8(fp)
    96ec:	e0bffb15 	stw	r2,-20(fp)
    96f0:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    96f4:	e0fffc17 	ldw	r3,-16(fp)
    96f8:	e0bffb17 	ldw	r2,-20(fp)
    96fc:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    9700:	e0bffb17 	ldw	r2,-20(fp)
    9704:	10c00017 	ldw	r3,0(r2)
    9708:	e0bffc17 	ldw	r2,-16(fp)
    970c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    9710:	e0bffb17 	ldw	r2,-20(fp)
    9714:	10c00017 	ldw	r3,0(r2)
    9718:	e0bffc17 	ldw	r2,-16(fp)
    971c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    9720:	e0fffb17 	ldw	r3,-20(fp)
    9724:	e0bffc17 	ldw	r2,-16(fp)
    9728:	18800015 	stw	r2,0(r3)

  return 0;  
    972c:	e03fff15 	stw	zero,-4(fp)
    9730:	e0bfff17 	ldw	r2,-4(fp)
}
    9734:	e037883a 	mov	sp,fp
    9738:	dfc00117 	ldw	ra,4(sp)
    973c:	df000017 	ldw	fp,0(sp)
    9740:	dec00204 	addi	sp,sp,8
    9744:	f800283a 	ret

00009748 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9748:	defffd04 	addi	sp,sp,-12
    974c:	dfc00215 	stw	ra,8(sp)
    9750:	df000115 	stw	fp,4(sp)
    9754:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9758:	00800074 	movhi	r2,1
    975c:	10aa2a04 	addi	r2,r2,-22360
    9760:	10800017 	ldw	r2,0(r2)
    9764:	1005003a 	cmpeq	r2,r2,zero
    9768:	1000061e 	bne	r2,zero,9784 <alt_get_errno+0x3c>
    976c:	00800074 	movhi	r2,1
    9770:	10aa2a04 	addi	r2,r2,-22360
    9774:	10800017 	ldw	r2,0(r2)
    9778:	103ee83a 	callr	r2
    977c:	e0bfff15 	stw	r2,-4(fp)
    9780:	00000306 	br	9790 <alt_get_errno+0x48>
    9784:	00800074 	movhi	r2,1
    9788:	10aae004 	addi	r2,r2,-21632
    978c:	e0bfff15 	stw	r2,-4(fp)
    9790:	e0bfff17 	ldw	r2,-4(fp)
}
    9794:	e037883a 	mov	sp,fp
    9798:	dfc00117 	ldw	ra,4(sp)
    979c:	df000017 	ldw	fp,0(sp)
    97a0:	dec00204 	addi	sp,sp,8
    97a4:	f800283a 	ret

000097a8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    97a8:	defffd04 	addi	sp,sp,-12
    97ac:	dfc00215 	stw	ra,8(sp)
    97b0:	df000115 	stw	fp,4(sp)
    97b4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    97b8:	00bfff04 	movi	r2,-4
    97bc:	00c00074 	movhi	r3,1
    97c0:	18e8f704 	addi	r3,r3,-23588
    97c4:	1885883a 	add	r2,r3,r2
    97c8:	e0bfff15 	stw	r2,-4(fp)
    97cc:	00000606 	br	97e8 <_do_ctors+0x40>
        (*ctor) (); 
    97d0:	e0bfff17 	ldw	r2,-4(fp)
    97d4:	10800017 	ldw	r2,0(r2)
    97d8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    97dc:	e0bfff17 	ldw	r2,-4(fp)
    97e0:	10bfff04 	addi	r2,r2,-4
    97e4:	e0bfff15 	stw	r2,-4(fp)
    97e8:	e0ffff17 	ldw	r3,-4(fp)
    97ec:	00800074 	movhi	r2,1
    97f0:	10a8f604 	addi	r2,r2,-23592
    97f4:	18bff62e 	bgeu	r3,r2,97d0 <_do_ctors+0x28>
        (*ctor) (); 
}
    97f8:	e037883a 	mov	sp,fp
    97fc:	dfc00117 	ldw	ra,4(sp)
    9800:	df000017 	ldw	fp,0(sp)
    9804:	dec00204 	addi	sp,sp,8
    9808:	f800283a 	ret

0000980c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    980c:	defffd04 	addi	sp,sp,-12
    9810:	dfc00215 	stw	ra,8(sp)
    9814:	df000115 	stw	fp,4(sp)
    9818:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    981c:	00bfff04 	movi	r2,-4
    9820:	00c00074 	movhi	r3,1
    9824:	18e8f704 	addi	r3,r3,-23588
    9828:	1885883a 	add	r2,r3,r2
    982c:	e0bfff15 	stw	r2,-4(fp)
    9830:	00000606 	br	984c <_do_dtors+0x40>
        (*dtor) (); 
    9834:	e0bfff17 	ldw	r2,-4(fp)
    9838:	10800017 	ldw	r2,0(r2)
    983c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    9840:	e0bfff17 	ldw	r2,-4(fp)
    9844:	10bfff04 	addi	r2,r2,-4
    9848:	e0bfff15 	stw	r2,-4(fp)
    984c:	e0ffff17 	ldw	r3,-4(fp)
    9850:	00800074 	movhi	r2,1
    9854:	10a8f704 	addi	r2,r2,-23588
    9858:	18bff62e 	bgeu	r3,r2,9834 <_do_dtors+0x28>
        (*dtor) (); 
}
    985c:	e037883a 	mov	sp,fp
    9860:	dfc00117 	ldw	ra,4(sp)
    9864:	df000017 	ldw	fp,0(sp)
    9868:	dec00204 	addi	sp,sp,8
    986c:	f800283a 	ret

00009870 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    9870:	deffff04 	addi	sp,sp,-4
    9874:	df000015 	stw	fp,0(sp)
    9878:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    987c:	e037883a 	mov	sp,fp
    9880:	df000017 	ldw	fp,0(sp)
    9884:	dec00104 	addi	sp,sp,4
    9888:	f800283a 	ret

0000988c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    988c:	defff804 	addi	sp,sp,-32
    9890:	dfc00715 	stw	ra,28(sp)
    9894:	df000615 	stw	fp,24(sp)
    9898:	dc000515 	stw	r16,20(sp)
    989c:	df000504 	addi	fp,sp,20
    98a0:	e13ffc15 	stw	r4,-16(fp)
    98a4:	e17ffd15 	stw	r5,-12(fp)
    98a8:	e1bffe15 	stw	r6,-8(fp)
    98ac:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    98b0:	e13ffd17 	ldw	r4,-12(fp)
    98b4:	e17ffe17 	ldw	r5,-8(fp)
    98b8:	e1bfff17 	ldw	r6,-4(fp)
    98bc:	0009ad40 	call	9ad4 <open>
    98c0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    98c4:	e0bffb17 	ldw	r2,-20(fp)
    98c8:	1004803a 	cmplt	r2,r2,zero
    98cc:	10001f1e 	bne	r2,zero,994c <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
    98d0:	e13ffb17 	ldw	r4,-20(fp)
    98d4:	04000074 	movhi	r16,1
    98d8:	8429c304 	addi	r16,r16,-22772
    98dc:	01400304 	movi	r5,12
    98e0:	0008ee40 	call	8ee4 <__mulsi3>
    98e4:	1405883a 	add	r2,r2,r16
    98e8:	10c00017 	ldw	r3,0(r2)
    98ec:	e0bffc17 	ldw	r2,-16(fp)
    98f0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    98f4:	e13ffb17 	ldw	r4,-20(fp)
    98f8:	04000074 	movhi	r16,1
    98fc:	8429c304 	addi	r16,r16,-22772
    9900:	01400304 	movi	r5,12
    9904:	0008ee40 	call	8ee4 <__mulsi3>
    9908:	1405883a 	add	r2,r2,r16
    990c:	10800104 	addi	r2,r2,4
    9910:	10c00017 	ldw	r3,0(r2)
    9914:	e0bffc17 	ldw	r2,-16(fp)
    9918:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    991c:	e13ffb17 	ldw	r4,-20(fp)
    9920:	04000074 	movhi	r16,1
    9924:	8429c304 	addi	r16,r16,-22772
    9928:	01400304 	movi	r5,12
    992c:	0008ee40 	call	8ee4 <__mulsi3>
    9930:	1405883a 	add	r2,r2,r16
    9934:	10800204 	addi	r2,r2,8
    9938:	10c00017 	ldw	r3,0(r2)
    993c:	e0bffc17 	ldw	r2,-16(fp)
    9940:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    9944:	e13ffb17 	ldw	r4,-20(fp)
    9948:	0009cc00 	call	9cc0 <alt_release_fd>
  }
} 
    994c:	e037883a 	mov	sp,fp
    9950:	dfc00217 	ldw	ra,8(sp)
    9954:	df000117 	ldw	fp,4(sp)
    9958:	dc000017 	ldw	r16,0(sp)
    995c:	dec00304 	addi	sp,sp,12
    9960:	f800283a 	ret

00009964 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    9964:	defffb04 	addi	sp,sp,-20
    9968:	dfc00415 	stw	ra,16(sp)
    996c:	df000315 	stw	fp,12(sp)
    9970:	df000304 	addi	fp,sp,12
    9974:	e13ffd15 	stw	r4,-12(fp)
    9978:	e17ffe15 	stw	r5,-8(fp)
    997c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    9980:	01000074 	movhi	r4,1
    9984:	2129c604 	addi	r4,r4,-22760
    9988:	e17ffd17 	ldw	r5,-12(fp)
    998c:	01800044 	movi	r6,1
    9990:	01c07fc4 	movi	r7,511
    9994:	000988c0 	call	988c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    9998:	01000074 	movhi	r4,1
    999c:	2129c304 	addi	r4,r4,-22772
    99a0:	e17ffe17 	ldw	r5,-8(fp)
    99a4:	000d883a 	mov	r6,zero
    99a8:	01c07fc4 	movi	r7,511
    99ac:	000988c0 	call	988c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    99b0:	01000074 	movhi	r4,1
    99b4:	2129c904 	addi	r4,r4,-22748
    99b8:	e17fff17 	ldw	r5,-4(fp)
    99bc:	01800044 	movi	r6,1
    99c0:	01c07fc4 	movi	r7,511
    99c4:	000988c0 	call	988c <alt_open_fd>
}  
    99c8:	e037883a 	mov	sp,fp
    99cc:	dfc00117 	ldw	ra,4(sp)
    99d0:	df000017 	ldw	fp,0(sp)
    99d4:	dec00204 	addi	sp,sp,8
    99d8:	f800283a 	ret

000099dc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    99dc:	defffa04 	addi	sp,sp,-24
    99e0:	dfc00515 	stw	ra,20(sp)
    99e4:	df000415 	stw	fp,16(sp)
    99e8:	dc000315 	stw	r16,12(sp)
    99ec:	df000304 	addi	fp,sp,12
    99f0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    99f4:	e0bffe17 	ldw	r2,-8(fp)
    99f8:	10800217 	ldw	r2,8(r2)
    99fc:	10d00034 	orhi	r3,r2,16384
    9a00:	e0bffe17 	ldw	r2,-8(fp)
    9a04:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9a08:	e03ffd15 	stw	zero,-12(fp)
    9a0c:	00002306 	br	9a9c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9a10:	e13ffd17 	ldw	r4,-12(fp)
    9a14:	04000074 	movhi	r16,1
    9a18:	8429c304 	addi	r16,r16,-22772
    9a1c:	01400304 	movi	r5,12
    9a20:	0008ee40 	call	8ee4 <__mulsi3>
    9a24:	1405883a 	add	r2,r2,r16
    9a28:	10c00017 	ldw	r3,0(r2)
    9a2c:	e0bffe17 	ldw	r2,-8(fp)
    9a30:	10800017 	ldw	r2,0(r2)
    9a34:	1880161e 	bne	r3,r2,9a90 <alt_file_locked+0xb4>
    9a38:	e13ffd17 	ldw	r4,-12(fp)
    9a3c:	04000074 	movhi	r16,1
    9a40:	8429c304 	addi	r16,r16,-22772
    9a44:	01400304 	movi	r5,12
    9a48:	0008ee40 	call	8ee4 <__mulsi3>
    9a4c:	1405883a 	add	r2,r2,r16
    9a50:	10800204 	addi	r2,r2,8
    9a54:	10800017 	ldw	r2,0(r2)
    9a58:	1004403a 	cmpge	r2,r2,zero
    9a5c:	10000c1e 	bne	r2,zero,9a90 <alt_file_locked+0xb4>
    9a60:	e13ffd17 	ldw	r4,-12(fp)
    9a64:	01400304 	movi	r5,12
    9a68:	0008ee40 	call	8ee4 <__mulsi3>
    9a6c:	1007883a 	mov	r3,r2
    9a70:	00800074 	movhi	r2,1
    9a74:	10a9c304 	addi	r2,r2,-22772
    9a78:	1887883a 	add	r3,r3,r2
    9a7c:	e0bffe17 	ldw	r2,-8(fp)
    9a80:	18800326 	beq	r3,r2,9a90 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    9a84:	00bffcc4 	movi	r2,-13
    9a88:	e0bfff15 	stw	r2,-4(fp)
    9a8c:	00000a06 	br	9ab8 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9a90:	e0bffd17 	ldw	r2,-12(fp)
    9a94:	10800044 	addi	r2,r2,1
    9a98:	e0bffd15 	stw	r2,-12(fp)
    9a9c:	00800074 	movhi	r2,1
    9aa0:	10aa2904 	addi	r2,r2,-22364
    9aa4:	10800017 	ldw	r2,0(r2)
    9aa8:	1007883a 	mov	r3,r2
    9aac:	e0bffd17 	ldw	r2,-12(fp)
    9ab0:	18bfd72e 	bgeu	r3,r2,9a10 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    9ab4:	e03fff15 	stw	zero,-4(fp)
    9ab8:	e0bfff17 	ldw	r2,-4(fp)
}
    9abc:	e037883a 	mov	sp,fp
    9ac0:	dfc00217 	ldw	ra,8(sp)
    9ac4:	df000117 	ldw	fp,4(sp)
    9ac8:	dc000017 	ldw	r16,0(sp)
    9acc:	dec00304 	addi	sp,sp,12
    9ad0:	f800283a 	ret

00009ad4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    9ad4:	defff404 	addi	sp,sp,-48
    9ad8:	dfc00b15 	stw	ra,44(sp)
    9adc:	df000a15 	stw	fp,40(sp)
    9ae0:	df000a04 	addi	fp,sp,40
    9ae4:	e13ffb15 	stw	r4,-20(fp)
    9ae8:	e17ffc15 	stw	r5,-16(fp)
    9aec:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    9af0:	00bfffc4 	movi	r2,-1
    9af4:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    9af8:	00bffb44 	movi	r2,-19
    9afc:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    9b00:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    9b04:	e13ffb17 	ldw	r4,-20(fp)
    9b08:	01400074 	movhi	r5,1
    9b0c:	296a2704 	addi	r5,r5,-22372
    9b10:	0009d580 	call	9d58 <alt_find_dev>
    9b14:	e0bffa15 	stw	r2,-24(fp)
    9b18:	e0bffa17 	ldw	r2,-24(fp)
    9b1c:	1004c03a 	cmpne	r2,r2,zero
    9b20:	1000051e 	bne	r2,zero,9b38 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    9b24:	e13ffb17 	ldw	r4,-20(fp)
    9b28:	0009dec0 	call	9dec <alt_find_file>
    9b2c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    9b30:	00800044 	movi	r2,1
    9b34:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    9b38:	e0bffa17 	ldw	r2,-24(fp)
    9b3c:	1005003a 	cmpeq	r2,r2,zero
    9b40:	1000311e 	bne	r2,zero,9c08 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
    9b44:	e13ffa17 	ldw	r4,-24(fp)
    9b48:	0009f0c0 	call	9f0c <alt_get_fd>
    9b4c:	e0bff815 	stw	r2,-32(fp)
    9b50:	e0bff817 	ldw	r2,-32(fp)
    9b54:	1004403a 	cmpge	r2,r2,zero
    9b58:	1000031e 	bne	r2,zero,9b68 <open+0x94>
    {
      status = index;
    9b5c:	e0bff817 	ldw	r2,-32(fp)
    9b60:	e0bff715 	stw	r2,-36(fp)
    9b64:	00002a06 	br	9c10 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
    9b68:	e13ff817 	ldw	r4,-32(fp)
    9b6c:	01400304 	movi	r5,12
    9b70:	0008ee40 	call	8ee4 <__mulsi3>
    9b74:	1007883a 	mov	r3,r2
    9b78:	00800074 	movhi	r2,1
    9b7c:	10a9c304 	addi	r2,r2,-22772
    9b80:	1885883a 	add	r2,r3,r2
    9b84:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    9b88:	e0fffc17 	ldw	r3,-16(fp)
    9b8c:	00900034 	movhi	r2,16384
    9b90:	10bfffc4 	addi	r2,r2,-1
    9b94:	1886703a 	and	r3,r3,r2
    9b98:	e0bff917 	ldw	r2,-28(fp)
    9b9c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    9ba0:	e0bff617 	ldw	r2,-40(fp)
    9ba4:	1004c03a 	cmpne	r2,r2,zero
    9ba8:	1000061e 	bne	r2,zero,9bc4 <open+0xf0>
    9bac:	e13ff917 	ldw	r4,-28(fp)
    9bb0:	00099dc0 	call	99dc <alt_file_locked>
    9bb4:	e0bff715 	stw	r2,-36(fp)
    9bb8:	e0bff717 	ldw	r2,-36(fp)
    9bbc:	1004803a 	cmplt	r2,r2,zero
    9bc0:	1000131e 	bne	r2,zero,9c10 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    9bc4:	e0bffa17 	ldw	r2,-24(fp)
    9bc8:	10800317 	ldw	r2,12(r2)
    9bcc:	1005003a 	cmpeq	r2,r2,zero
    9bd0:	1000091e 	bne	r2,zero,9bf8 <open+0x124>
    9bd4:	e0bffa17 	ldw	r2,-24(fp)
    9bd8:	10800317 	ldw	r2,12(r2)
    9bdc:	e13ff917 	ldw	r4,-28(fp)
    9be0:	e17ffb17 	ldw	r5,-20(fp)
    9be4:	e1bffc17 	ldw	r6,-16(fp)
    9be8:	e1fffd17 	ldw	r7,-12(fp)
    9bec:	103ee83a 	callr	r2
    9bf0:	e0bfff15 	stw	r2,-4(fp)
    9bf4:	00000106 	br	9bfc <open+0x128>
    9bf8:	e03fff15 	stw	zero,-4(fp)
    9bfc:	e0bfff17 	ldw	r2,-4(fp)
    9c00:	e0bff715 	stw	r2,-36(fp)
    9c04:	00000206 	br	9c10 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    9c08:	00bffb44 	movi	r2,-19
    9c0c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    9c10:	e0bff717 	ldw	r2,-36(fp)
    9c14:	1004403a 	cmpge	r2,r2,zero
    9c18:	1000091e 	bne	r2,zero,9c40 <open+0x16c>
  {
    alt_release_fd (index);  
    9c1c:	e13ff817 	ldw	r4,-32(fp)
    9c20:	0009cc00 	call	9cc0 <alt_release_fd>
    ALT_ERRNO = -status;
    9c24:	0009c600 	call	9c60 <alt_get_errno>
    9c28:	e0fff717 	ldw	r3,-36(fp)
    9c2c:	00c7c83a 	sub	r3,zero,r3
    9c30:	10c00015 	stw	r3,0(r2)
    return -1;
    9c34:	00bfffc4 	movi	r2,-1
    9c38:	e0bffe15 	stw	r2,-8(fp)
    9c3c:	00000206 	br	9c48 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
    9c40:	e0bff817 	ldw	r2,-32(fp)
    9c44:	e0bffe15 	stw	r2,-8(fp)
    9c48:	e0bffe17 	ldw	r2,-8(fp)
}
    9c4c:	e037883a 	mov	sp,fp
    9c50:	dfc00117 	ldw	ra,4(sp)
    9c54:	df000017 	ldw	fp,0(sp)
    9c58:	dec00204 	addi	sp,sp,8
    9c5c:	f800283a 	ret

00009c60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9c60:	defffd04 	addi	sp,sp,-12
    9c64:	dfc00215 	stw	ra,8(sp)
    9c68:	df000115 	stw	fp,4(sp)
    9c6c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9c70:	00800074 	movhi	r2,1
    9c74:	10aa2a04 	addi	r2,r2,-22360
    9c78:	10800017 	ldw	r2,0(r2)
    9c7c:	1005003a 	cmpeq	r2,r2,zero
    9c80:	1000061e 	bne	r2,zero,9c9c <alt_get_errno+0x3c>
    9c84:	00800074 	movhi	r2,1
    9c88:	10aa2a04 	addi	r2,r2,-22360
    9c8c:	10800017 	ldw	r2,0(r2)
    9c90:	103ee83a 	callr	r2
    9c94:	e0bfff15 	stw	r2,-4(fp)
    9c98:	00000306 	br	9ca8 <alt_get_errno+0x48>
    9c9c:	00800074 	movhi	r2,1
    9ca0:	10aae004 	addi	r2,r2,-21632
    9ca4:	e0bfff15 	stw	r2,-4(fp)
    9ca8:	e0bfff17 	ldw	r2,-4(fp)
}
    9cac:	e037883a 	mov	sp,fp
    9cb0:	dfc00117 	ldw	ra,4(sp)
    9cb4:	df000017 	ldw	fp,0(sp)
    9cb8:	dec00204 	addi	sp,sp,8
    9cbc:	f800283a 	ret

00009cc0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    9cc0:	defffc04 	addi	sp,sp,-16
    9cc4:	dfc00315 	stw	ra,12(sp)
    9cc8:	df000215 	stw	fp,8(sp)
    9ccc:	dc000115 	stw	r16,4(sp)
    9cd0:	df000104 	addi	fp,sp,4
    9cd4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    9cd8:	e0bfff17 	ldw	r2,-4(fp)
    9cdc:	108000d0 	cmplti	r2,r2,3
    9ce0:	10000f1e 	bne	r2,zero,9d20 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
    9ce4:	e13fff17 	ldw	r4,-4(fp)
    9ce8:	04000074 	movhi	r16,1
    9cec:	8429c304 	addi	r16,r16,-22772
    9cf0:	01400304 	movi	r5,12
    9cf4:	0008ee40 	call	8ee4 <__mulsi3>
    9cf8:	1405883a 	add	r2,r2,r16
    9cfc:	10800204 	addi	r2,r2,8
    9d00:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    9d04:	e13fff17 	ldw	r4,-4(fp)
    9d08:	04000074 	movhi	r16,1
    9d0c:	8429c304 	addi	r16,r16,-22772
    9d10:	01400304 	movi	r5,12
    9d14:	0008ee40 	call	8ee4 <__mulsi3>
    9d18:	1405883a 	add	r2,r2,r16
    9d1c:	10000015 	stw	zero,0(r2)
  }
}
    9d20:	e037883a 	mov	sp,fp
    9d24:	dfc00217 	ldw	ra,8(sp)
    9d28:	df000117 	ldw	fp,4(sp)
    9d2c:	dc000017 	ldw	r16,0(sp)
    9d30:	dec00304 	addi	sp,sp,12
    9d34:	f800283a 	ret

00009d38 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    9d38:	deffff04 	addi	sp,sp,-4
    9d3c:	df000015 	stw	fp,0(sp)
    9d40:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    9d44:	000170fa 	wrctl	ienable,zero
}
    9d48:	e037883a 	mov	sp,fp
    9d4c:	df000017 	ldw	fp,0(sp)
    9d50:	dec00104 	addi	sp,sp,4
    9d54:	f800283a 	ret

00009d58 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    9d58:	defff904 	addi	sp,sp,-28
    9d5c:	dfc00615 	stw	ra,24(sp)
    9d60:	df000515 	stw	fp,20(sp)
    9d64:	df000504 	addi	fp,sp,20
    9d68:	e13ffd15 	stw	r4,-12(fp)
    9d6c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    9d70:	e0bffe17 	ldw	r2,-8(fp)
    9d74:	10800017 	ldw	r2,0(r2)
    9d78:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    9d7c:	e13ffd17 	ldw	r4,-12(fp)
    9d80:	00084200 	call	8420 <strlen>
    9d84:	10800044 	addi	r2,r2,1
    9d88:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9d8c:	00000d06 	br	9dc4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    9d90:	e0bffc17 	ldw	r2,-16(fp)
    9d94:	11000217 	ldw	r4,8(r2)
    9d98:	e1bffb17 	ldw	r6,-20(fp)
    9d9c:	e17ffd17 	ldw	r5,-12(fp)
    9da0:	000a0100 	call	a010 <memcmp>
    9da4:	1004c03a 	cmpne	r2,r2,zero
    9da8:	1000031e 	bne	r2,zero,9db8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    9dac:	e0bffc17 	ldw	r2,-16(fp)
    9db0:	e0bfff15 	stw	r2,-4(fp)
    9db4:	00000706 	br	9dd4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    9db8:	e0bffc17 	ldw	r2,-16(fp)
    9dbc:	10800017 	ldw	r2,0(r2)
    9dc0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9dc4:	e0fffe17 	ldw	r3,-8(fp)
    9dc8:	e0bffc17 	ldw	r2,-16(fp)
    9dcc:	10fff01e 	bne	r2,r3,9d90 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    9dd0:	e03fff15 	stw	zero,-4(fp)
    9dd4:	e0bfff17 	ldw	r2,-4(fp)
}
    9dd8:	e037883a 	mov	sp,fp
    9ddc:	dfc00117 	ldw	ra,4(sp)
    9de0:	df000017 	ldw	fp,0(sp)
    9de4:	dec00204 	addi	sp,sp,8
    9de8:	f800283a 	ret

00009dec <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    9dec:	defffa04 	addi	sp,sp,-24
    9df0:	dfc00515 	stw	ra,20(sp)
    9df4:	df000415 	stw	fp,16(sp)
    9df8:	df000404 	addi	fp,sp,16
    9dfc:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    9e00:	00800074 	movhi	r2,1
    9e04:	10aa2504 	addi	r2,r2,-22380
    9e08:	10800017 	ldw	r2,0(r2)
    9e0c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9e10:	00003306 	br	9ee0 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    9e14:	e0bffd17 	ldw	r2,-12(fp)
    9e18:	11000217 	ldw	r4,8(r2)
    9e1c:	00084200 	call	8420 <strlen>
    9e20:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    9e24:	e0bffd17 	ldw	r2,-12(fp)
    9e28:	10c00217 	ldw	r3,8(r2)
    9e2c:	e0bffc17 	ldw	r2,-16(fp)
    9e30:	1885883a 	add	r2,r3,r2
    9e34:	10bfffc4 	addi	r2,r2,-1
    9e38:	10800003 	ldbu	r2,0(r2)
    9e3c:	10803fcc 	andi	r2,r2,255
    9e40:	1080201c 	xori	r2,r2,128
    9e44:	10bfe004 	addi	r2,r2,-128
    9e48:	10800bd8 	cmpnei	r2,r2,47
    9e4c:	1000031e 	bne	r2,zero,9e5c <alt_find_file+0x70>
    {
      len -= 1;
    9e50:	e0bffc17 	ldw	r2,-16(fp)
    9e54:	10bfffc4 	addi	r2,r2,-1
    9e58:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    9e5c:	e0bffc17 	ldw	r2,-16(fp)
    9e60:	1007883a 	mov	r3,r2
    9e64:	e0bffe17 	ldw	r2,-8(fp)
    9e68:	1885883a 	add	r2,r3,r2
    9e6c:	10800003 	ldbu	r2,0(r2)
    9e70:	10803fcc 	andi	r2,r2,255
    9e74:	1080201c 	xori	r2,r2,128
    9e78:	10bfe004 	addi	r2,r2,-128
    9e7c:	10800be0 	cmpeqi	r2,r2,47
    9e80:	10000a1e 	bne	r2,zero,9eac <alt_find_file+0xc0>
    9e84:	e0bffc17 	ldw	r2,-16(fp)
    9e88:	1007883a 	mov	r3,r2
    9e8c:	e0bffe17 	ldw	r2,-8(fp)
    9e90:	1885883a 	add	r2,r3,r2
    9e94:	10800003 	ldbu	r2,0(r2)
    9e98:	10803fcc 	andi	r2,r2,255
    9e9c:	1080201c 	xori	r2,r2,128
    9ea0:	10bfe004 	addi	r2,r2,-128
    9ea4:	1004c03a 	cmpne	r2,r2,zero
    9ea8:	10000a1e 	bne	r2,zero,9ed4 <alt_find_file+0xe8>
    9eac:	e0bffd17 	ldw	r2,-12(fp)
    9eb0:	11000217 	ldw	r4,8(r2)
    9eb4:	e1bffc17 	ldw	r6,-16(fp)
    9eb8:	e17ffe17 	ldw	r5,-8(fp)
    9ebc:	000a0100 	call	a010 <memcmp>
    9ec0:	1004c03a 	cmpne	r2,r2,zero
    9ec4:	1000031e 	bne	r2,zero,9ed4 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    9ec8:	e0bffd17 	ldw	r2,-12(fp)
    9ecc:	e0bfff15 	stw	r2,-4(fp)
    9ed0:	00000806 	br	9ef4 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    9ed4:	e0bffd17 	ldw	r2,-12(fp)
    9ed8:	10800017 	ldw	r2,0(r2)
    9edc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9ee0:	00c00074 	movhi	r3,1
    9ee4:	18ea2504 	addi	r3,r3,-22380
    9ee8:	e0bffd17 	ldw	r2,-12(fp)
    9eec:	10ffc91e 	bne	r2,r3,9e14 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    9ef0:	e03fff15 	stw	zero,-4(fp)
    9ef4:	e0bfff17 	ldw	r2,-4(fp)
}
    9ef8:	e037883a 	mov	sp,fp
    9efc:	dfc00117 	ldw	ra,4(sp)
    9f00:	df000017 	ldw	fp,0(sp)
    9f04:	dec00204 	addi	sp,sp,8
    9f08:	f800283a 	ret

00009f0c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    9f0c:	defffa04 	addi	sp,sp,-24
    9f10:	dfc00515 	stw	ra,20(sp)
    9f14:	df000415 	stw	fp,16(sp)
    9f18:	dc000315 	stw	r16,12(sp)
    9f1c:	df000304 	addi	fp,sp,12
    9f20:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    9f24:	00bffa04 	movi	r2,-24
    9f28:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    9f2c:	e03ffe15 	stw	zero,-8(fp)
    9f30:	00002006 	br	9fb4 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
    9f34:	e13ffe17 	ldw	r4,-8(fp)
    9f38:	04000074 	movhi	r16,1
    9f3c:	8429c304 	addi	r16,r16,-22772
    9f40:	01400304 	movi	r5,12
    9f44:	0008ee40 	call	8ee4 <__mulsi3>
    9f48:	1405883a 	add	r2,r2,r16
    9f4c:	10800017 	ldw	r2,0(r2)
    9f50:	1004c03a 	cmpne	r2,r2,zero
    9f54:	1000141e 	bne	r2,zero,9fa8 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
    9f58:	e13ffe17 	ldw	r4,-8(fp)
    9f5c:	04000074 	movhi	r16,1
    9f60:	8429c304 	addi	r16,r16,-22772
    9f64:	01400304 	movi	r5,12
    9f68:	0008ee40 	call	8ee4 <__mulsi3>
    9f6c:	1407883a 	add	r3,r2,r16
    9f70:	e0bfff17 	ldw	r2,-4(fp)
    9f74:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    9f78:	00800074 	movhi	r2,1
    9f7c:	10aa2904 	addi	r2,r2,-22364
    9f80:	10c00017 	ldw	r3,0(r2)
    9f84:	e0bffe17 	ldw	r2,-8(fp)
    9f88:	1880040e 	bge	r3,r2,9f9c <alt_get_fd+0x90>
      {
        alt_max_fd = i;
    9f8c:	00c00074 	movhi	r3,1
    9f90:	18ea2904 	addi	r3,r3,-22364
    9f94:	e0bffe17 	ldw	r2,-8(fp)
    9f98:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    9f9c:	e0bffe17 	ldw	r2,-8(fp)
    9fa0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    9fa4:	00000606 	br	9fc0 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    9fa8:	e0bffe17 	ldw	r2,-8(fp)
    9fac:	10800044 	addi	r2,r2,1
    9fb0:	e0bffe15 	stw	r2,-8(fp)
    9fb4:	e0bffe17 	ldw	r2,-8(fp)
    9fb8:	10800810 	cmplti	r2,r2,32
    9fbc:	103fdd1e 	bne	r2,zero,9f34 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    9fc0:	e0bffd17 	ldw	r2,-12(fp)
}
    9fc4:	e037883a 	mov	sp,fp
    9fc8:	dfc00217 	ldw	ra,8(sp)
    9fcc:	df000117 	ldw	fp,4(sp)
    9fd0:	dc000017 	ldw	r16,0(sp)
    9fd4:	dec00304 	addi	sp,sp,12
    9fd8:	f800283a 	ret

00009fdc <atexit>:
    9fdc:	200b883a 	mov	r5,r4
    9fe0:	000d883a 	mov	r6,zero
    9fe4:	0009883a 	mov	r4,zero
    9fe8:	000f883a 	mov	r7,zero
    9fec:	000a04c1 	jmpi	a04c <__register_exitproc>

00009ff0 <exit>:
    9ff0:	defffe04 	addi	sp,sp,-8
    9ff4:	dc400015 	stw	r17,0(sp)
    9ff8:	000b883a 	mov	r5,zero
    9ffc:	2023883a 	mov	r17,r4
    a000:	dfc00115 	stw	ra,4(sp)
    a004:	000a1bc0 	call	a1bc <__call_exitprocs>
    a008:	8809883a 	mov	r4,r17
    a00c:	000a3b80 	call	a3b8 <_exit>

0000a010 <memcmp>:
    a010:	31ffffc4 	addi	r7,r6,-1
    a014:	3000061e 	bne	r6,zero,a030 <memcmp+0x20>
    a018:	00000a06 	br	a044 <memcmp+0x34>
    a01c:	39ffffc4 	addi	r7,r7,-1
    a020:	00bfffc4 	movi	r2,-1
    a024:	21000044 	addi	r4,r4,1
    a028:	29400044 	addi	r5,r5,1
    a02c:	38800526 	beq	r7,r2,a044 <memcmp+0x34>
    a030:	20c00003 	ldbu	r3,0(r4)
    a034:	28800003 	ldbu	r2,0(r5)
    a038:	18bff826 	beq	r3,r2,a01c <memcmp+0xc>
    a03c:	1885c83a 	sub	r2,r3,r2
    a040:	f800283a 	ret
    a044:	0005883a 	mov	r2,zero
    a048:	f800283a 	ret

0000a04c <__register_exitproc>:
    a04c:	defff904 	addi	sp,sp,-28
    a050:	00800074 	movhi	r2,1
    a054:	10aa2404 	addi	r2,r2,-22384
    a058:	dc400115 	stw	r17,4(sp)
    a05c:	14400017 	ldw	r17,0(r2)
    a060:	dc000015 	stw	r16,0(sp)
    a064:	dd400515 	stw	r21,20(sp)
    a068:	8c000c17 	ldw	r16,48(r17)
    a06c:	dd000415 	stw	r20,16(sp)
    a070:	dcc00315 	stw	r19,12(sp)
    a074:	dc800215 	stw	r18,8(sp)
    a078:	dfc00615 	stw	ra,24(sp)
    a07c:	2025883a 	mov	r18,r4
    a080:	282b883a 	mov	r21,r5
    a084:	3029883a 	mov	r20,r6
    a088:	3827883a 	mov	r19,r7
    a08c:	80002626 	beq	r16,zero,a128 <__register_exitproc+0xdc>
    a090:	81400117 	ldw	r5,4(r16)
    a094:	008007c4 	movi	r2,31
    a098:	11403716 	blt	r2,r5,a178 <__register_exitproc+0x12c>
    a09c:	90002026 	beq	r18,zero,a120 <__register_exitproc+0xd4>
    a0a0:	81802217 	ldw	r6,136(r16)
    a0a4:	30002926 	beq	r6,zero,a14c <__register_exitproc+0x100>
    a0a8:	81400117 	ldw	r5,4(r16)
    a0ac:	00c00044 	movi	r3,1
    a0b0:	31004017 	ldw	r4,256(r6)
    a0b4:	1946983a 	sll	r3,r3,r5
    a0b8:	2945883a 	add	r2,r5,r5
    a0bc:	1085883a 	add	r2,r2,r2
    a0c0:	1185883a 	add	r2,r2,r6
    a0c4:	20c8b03a 	or	r4,r4,r3
    a0c8:	14c02015 	stw	r19,128(r2)
    a0cc:	15000015 	stw	r20,0(r2)
    a0d0:	00800084 	movi	r2,2
    a0d4:	31004015 	stw	r4,256(r6)
    a0d8:	90801826 	beq	r18,r2,a13c <__register_exitproc+0xf0>
    a0dc:	2945883a 	add	r2,r5,r5
    a0e0:	1085883a 	add	r2,r2,r2
    a0e4:	1405883a 	add	r2,r2,r16
    a0e8:	28c00044 	addi	r3,r5,1
    a0ec:	0009883a 	mov	r4,zero
    a0f0:	15400215 	stw	r21,8(r2)
    a0f4:	80c00115 	stw	r3,4(r16)
    a0f8:	2005883a 	mov	r2,r4
    a0fc:	dfc00617 	ldw	ra,24(sp)
    a100:	dd400517 	ldw	r21,20(sp)
    a104:	dd000417 	ldw	r20,16(sp)
    a108:	dcc00317 	ldw	r19,12(sp)
    a10c:	dc800217 	ldw	r18,8(sp)
    a110:	dc400117 	ldw	r17,4(sp)
    a114:	dc000017 	ldw	r16,0(sp)
    a118:	dec00704 	addi	sp,sp,28
    a11c:	f800283a 	ret
    a120:	81400117 	ldw	r5,4(r16)
    a124:	003fed06 	br	a0dc <__register_exitproc+0x90>
    a128:	00800074 	movhi	r2,1
    a12c:	10aae404 	addi	r2,r2,-21616
    a130:	1021883a 	mov	r16,r2
    a134:	88800c15 	stw	r2,48(r17)
    a138:	003fd506 	br	a090 <__register_exitproc+0x44>
    a13c:	30804117 	ldw	r2,260(r6)
    a140:	10c4b03a 	or	r2,r2,r3
    a144:	30804115 	stw	r2,260(r6)
    a148:	003fe406 	br	a0dc <__register_exitproc+0x90>
    a14c:	00800034 	movhi	r2,0
    a150:	10800004 	addi	r2,r2,0
    a154:	10000b26 	beq	r2,zero,a184 <__register_exitproc+0x138>
    a158:	01004204 	movi	r4,264
    a15c:	103ee83a 	callr	r2
    a160:	10000826 	beq	r2,zero,a184 <__register_exitproc+0x138>
    a164:	100d883a 	mov	r6,r2
    a168:	10004015 	stw	zero,256(r2)
    a16c:	10004115 	stw	zero,260(r2)
    a170:	80802215 	stw	r2,136(r16)
    a174:	003fcc06 	br	a0a8 <__register_exitproc+0x5c>
    a178:	00800034 	movhi	r2,0
    a17c:	10800004 	addi	r2,r2,0
    a180:	1000021e 	bne	r2,zero,a18c <__register_exitproc+0x140>
    a184:	013fffc4 	movi	r4,-1
    a188:	003fdb06 	br	a0f8 <__register_exitproc+0xac>
    a18c:	01002304 	movi	r4,140
    a190:	103ee83a 	callr	r2
    a194:	1007883a 	mov	r3,r2
    a198:	103ffa26 	beq	r2,zero,a184 <__register_exitproc+0x138>
    a19c:	88800c17 	ldw	r2,48(r17)
    a1a0:	1821883a 	mov	r16,r3
    a1a4:	18000115 	stw	zero,4(r3)
    a1a8:	18800015 	stw	r2,0(r3)
    a1ac:	88c00c15 	stw	r3,48(r17)
    a1b0:	903fdb26 	beq	r18,zero,a120 <__register_exitproc+0xd4>
    a1b4:	003fba06 	br	a0a0 <__register_exitproc+0x54>

0000a1b8 <register_fini>:
    a1b8:	f800283a 	ret

0000a1bc <__call_exitprocs>:
    a1bc:	defff304 	addi	sp,sp,-52
    a1c0:	00800074 	movhi	r2,1
    a1c4:	10aa2404 	addi	r2,r2,-22384
    a1c8:	df000b15 	stw	fp,44(sp)
    a1cc:	17000017 	ldw	fp,0(r2)
    a1d0:	00800034 	movhi	r2,0
    a1d4:	10800004 	addi	r2,r2,0
    a1d8:	1005003a 	cmpeq	r2,r2,zero
    a1dc:	d8800215 	stw	r2,8(sp)
    a1e0:	e0800c04 	addi	r2,fp,48
    a1e4:	dd800915 	stw	r22,36(sp)
    a1e8:	dd400815 	stw	r21,32(sp)
    a1ec:	dfc00c15 	stw	ra,48(sp)
    a1f0:	ddc00a15 	stw	r23,40(sp)
    a1f4:	dd000715 	stw	r20,28(sp)
    a1f8:	dcc00615 	stw	r19,24(sp)
    a1fc:	dc800515 	stw	r18,20(sp)
    a200:	dc400415 	stw	r17,16(sp)
    a204:	dc000315 	stw	r16,12(sp)
    a208:	282d883a 	mov	r22,r5
    a20c:	d9000115 	stw	r4,4(sp)
    a210:	d8800015 	stw	r2,0(sp)
    a214:	282b003a 	cmpeq	r21,r5,zero
    a218:	e4400c17 	ldw	r17,48(fp)
    a21c:	88001226 	beq	r17,zero,a268 <__call_exitprocs+0xac>
    a220:	ddc00017 	ldw	r23,0(sp)
    a224:	88800117 	ldw	r2,4(r17)
    a228:	8c802217 	ldw	r18,136(r17)
    a22c:	143fffc4 	addi	r16,r2,-1
    a230:	80000b16 	blt	r16,zero,a260 <__call_exitprocs+0xa4>
    a234:	9027003a 	cmpeq	r19,r18,zero
    a238:	a800171e 	bne	r21,zero,a298 <__call_exitprocs+0xdc>
    a23c:	9800051e 	bne	r19,zero,a254 <__call_exitprocs+0x98>
    a240:	8409883a 	add	r4,r16,r16
    a244:	2105883a 	add	r2,r4,r4
    a248:	1485883a 	add	r2,r2,r18
    a24c:	10c02017 	ldw	r3,128(r2)
    a250:	b0c01226 	beq	r22,r3,a29c <__call_exitprocs+0xe0>
    a254:	843fffc4 	addi	r16,r16,-1
    a258:	00bfffc4 	movi	r2,-1
    a25c:	80bff61e 	bne	r16,r2,a238 <__call_exitprocs+0x7c>
    a260:	d8800217 	ldw	r2,8(sp)
    a264:	10003226 	beq	r2,zero,a330 <__call_exitprocs+0x174>
    a268:	dfc00c17 	ldw	ra,48(sp)
    a26c:	df000b17 	ldw	fp,44(sp)
    a270:	ddc00a17 	ldw	r23,40(sp)
    a274:	dd800917 	ldw	r22,36(sp)
    a278:	dd400817 	ldw	r21,32(sp)
    a27c:	dd000717 	ldw	r20,28(sp)
    a280:	dcc00617 	ldw	r19,24(sp)
    a284:	dc800517 	ldw	r18,20(sp)
    a288:	dc400417 	ldw	r17,16(sp)
    a28c:	dc000317 	ldw	r16,12(sp)
    a290:	dec00d04 	addi	sp,sp,52
    a294:	f800283a 	ret
    a298:	8409883a 	add	r4,r16,r16
    a29c:	88c00117 	ldw	r3,4(r17)
    a2a0:	2105883a 	add	r2,r4,r4
    a2a4:	1445883a 	add	r2,r2,r17
    a2a8:	18ffffc4 	addi	r3,r3,-1
    a2ac:	11800217 	ldw	r6,8(r2)
    a2b0:	1c001826 	beq	r3,r16,a314 <__call_exitprocs+0x158>
    a2b4:	10000215 	stw	zero,8(r2)
    a2b8:	303fe626 	beq	r6,zero,a254 <__call_exitprocs+0x98>
    a2bc:	8d000117 	ldw	r20,4(r17)
    a2c0:	9800121e 	bne	r19,zero,a30c <__call_exitprocs+0x150>
    a2c4:	00c00044 	movi	r3,1
    a2c8:	1c06983a 	sll	r3,r3,r16
    a2cc:	90804017 	ldw	r2,256(r18)
    a2d0:	1884703a 	and	r2,r3,r2
    a2d4:	10000d26 	beq	r2,zero,a30c <__call_exitprocs+0x150>
    a2d8:	90804117 	ldw	r2,260(r18)
    a2dc:	1884703a 	and	r2,r3,r2
    a2e0:	10000e1e 	bne	r2,zero,a31c <__call_exitprocs+0x160>
    a2e4:	2105883a 	add	r2,r4,r4
    a2e8:	1485883a 	add	r2,r2,r18
    a2ec:	11400017 	ldw	r5,0(r2)
    a2f0:	d9000117 	ldw	r4,4(sp)
    a2f4:	303ee83a 	callr	r6
    a2f8:	88800117 	ldw	r2,4(r17)
    a2fc:	a0bfc61e 	bne	r20,r2,a218 <__call_exitprocs+0x5c>
    a300:	b8800017 	ldw	r2,0(r23)
    a304:	147fd326 	beq	r2,r17,a254 <__call_exitprocs+0x98>
    a308:	003fc306 	br	a218 <__call_exitprocs+0x5c>
    a30c:	303ee83a 	callr	r6
    a310:	003ff906 	br	a2f8 <__call_exitprocs+0x13c>
    a314:	8c000115 	stw	r16,4(r17)
    a318:	003fe706 	br	a2b8 <__call_exitprocs+0xfc>
    a31c:	2105883a 	add	r2,r4,r4
    a320:	1485883a 	add	r2,r2,r18
    a324:	11000017 	ldw	r4,0(r2)
    a328:	303ee83a 	callr	r6
    a32c:	003ff206 	br	a2f8 <__call_exitprocs+0x13c>
    a330:	88800117 	ldw	r2,4(r17)
    a334:	10000b1e 	bne	r2,zero,a364 <__call_exitprocs+0x1a8>
    a338:	89000017 	ldw	r4,0(r17)
    a33c:	20000a26 	beq	r4,zero,a368 <__call_exitprocs+0x1ac>
    a340:	b9000015 	stw	r4,0(r23)
    a344:	90000226 	beq	r18,zero,a350 <__call_exitprocs+0x194>
    a348:	9009883a 	mov	r4,r18
    a34c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    a350:	8809883a 	mov	r4,r17
    a354:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    a358:	bc400017 	ldw	r17,0(r23)
    a35c:	883fb11e 	bne	r17,zero,a224 <__call_exitprocs+0x68>
    a360:	003fc106 	br	a268 <__call_exitprocs+0xac>
    a364:	89000017 	ldw	r4,0(r17)
    a368:	882f883a 	mov	r23,r17
    a36c:	2023883a 	mov	r17,r4
    a370:	883fac1e 	bne	r17,zero,a224 <__call_exitprocs+0x68>
    a374:	003fbc06 	br	a268 <__call_exitprocs+0xac>

0000a378 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    a378:	defffd04 	addi	sp,sp,-12
    a37c:	df000215 	stw	fp,8(sp)
    a380:	df000204 	addi	fp,sp,8
    a384:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    a388:	e0bfff17 	ldw	r2,-4(fp)
    a38c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    a390:	e0bffe17 	ldw	r2,-8(fp)
    a394:	1005003a 	cmpeq	r2,r2,zero
    a398:	1000021e 	bne	r2,zero,a3a4 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    a39c:	002af070 	cmpltui	zero,zero,43969
    a3a0:	00000106 	br	a3a8 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    a3a4:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    a3a8:	e037883a 	mov	sp,fp
    a3ac:	df000017 	ldw	fp,0(sp)
    a3b0:	dec00104 	addi	sp,sp,4
    a3b4:	f800283a 	ret

0000a3b8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    a3b8:	defffd04 	addi	sp,sp,-12
    a3bc:	dfc00215 	stw	ra,8(sp)
    a3c0:	df000115 	stw	fp,4(sp)
    a3c4:	df000104 	addi	fp,sp,4
    a3c8:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    a3cc:	e13fff17 	ldw	r4,-4(fp)
    a3d0:	000a3780 	call	a378 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    a3d4:	003fff06 	br	a3d4 <_exit+0x1c>
    a3d8:	0000a1b8 	rdprs	zero,zero,646
